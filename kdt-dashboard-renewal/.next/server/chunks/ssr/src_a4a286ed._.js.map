{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/User/Documents/GitHub/KDT_Dataset/kdt-dashboard-renewal/src/lib/data-utils.ts"],"sourcesContent":["// 데이터 파싱 및 변환 유틸리티\n\nexport interface RawCourseData {\n  고유값: string;\n  과정명: string;\n  훈련과정ID: string;\n  회차: string;\n  훈련기관: string;\n  총훈련일수: string;\n  총훈련시간: string;\n  과정시작일: Date;\n  과정종료일: Date;\n  NCS명: string;\n  NCS코드: string;\n  훈련비: number;\n  정원: string;\n  수강신청인원: number;\n  수료인원: number;\n  수료율: string;\n  만족도: string;\n  취업인원: string;\n  취업률: string;\n  지역: string;\n  주소: string;\n  과정페이지링크: string;\n  선도기업: string;\n  파트너기관: string;\n  매출최대: number;\n  매출최소: number;\n  실매출대비: string;\n  '2021년': number;\n  '2022년': number;\n  '2023년': number;\n  '2024년': number;\n  '2025년': number;\n  '2026년': number;\n}\n\nexport interface CourseData {\n  고유값: string;\n  훈련기관: string;\n  원본훈련기관?: string; // 원본 기관명 보존\n  '훈련과정 ID'?: string;\n  과정명: string;\n  과정시작일: string;\n  과정종료일: string;\n  '수강신청 인원': number;\n  '수료인원': number;\n  누적매출?: number;\n  총훈련일수: number;\n  총훈련시간: number;\n  훈련비: number;\n  정원: number;\n  '수료율': number;\n  만족도: number;\n  취업인원: number;\n  취업률: number;\n  '취업인원 (3개월)': number;\n  '취업률 (3개월)': number;\n  '취업인원 (6개월)': number;\n  '취업률 (6개월)': number;\n  훈련연도: number;\n  훈련유형: string;\n  NCS명: string;\n  NCS코드?: string;\n  파트너기관?: string;\n  선도기업?: string;\n  isLeadingCompanyCourse?: boolean;\n  leadingCompanyPartnerInstitution?: string;\n  '실 매출 대비'?: number;\n  '매출 최대'?: number;\n  '매출 최소'?: number;\n  조정_실매출대비?: number;\n  조정_누적매출?: number;\n  '2021년'?: number;\n  '2022년'?: number;\n  '2023년'?: number;\n  '2024년'?: number;\n  '2025년'?: number;\n  '2026년'?: number;\n  '조정_2021년'?: number;\n  '조정_2022년'?: number;\n  '조정_2023년'?: number;\n  '조정_2024년'?: number;\n  '조정_2025년'?: number;\n  '조정_2026년'?: number;\n  월별매출?: { [key: string]: number };\n  월별수강인원?: { [key: string]: number };\n  월별수료인원?: { [key: string]: number };\n  과정상세?: string;\n  회차?: string;\n  과정페이지링크?: string;\n  [key: string]: any;  // 동적 필드를 위한 인덱스 시그니처\n}\n\nexport interface AggregatedCourseData {\n  과정명: string;\n  '훈련과정 ID'?: string; // 훈련과정 ID 추가\n  총수강신청인원: number;\n  총수료인원: number;\n  총누적매출: number;\n  최소과정시작일: string;\n  최대과정종료일: string;\n  훈련유형들: string[];\n  원천과정수: number; // 집계된 과정의 개수\n  총훈련생수: number;\n  평균만족도: number;\n  평균수료율: number;\n  graduatesStr?: string; // Add graduatesStr\n}\n\nexport interface YearlyStats {\n  year: number;\n  revenue: number;\n  totalStudents: number;\n  completedStudents: number;\n  courses: CourseData[];\n}\n\nexport interface MonthlyStats {\n  month: string;\n  revenue: number;\n  totalStudents: number;\n  completedStudents: number;\n  courses: CourseData[];\n  completionRate: number;\n}\n\nexport interface InstitutionStat {\n  institutionName: string;\n  totalRevenue: number;\n  totalCourses: number;\n  totalStudents: number;\n  completedStudents: number;\n  completionRate: number;\n  avgSatisfaction: number;\n  courses: CourseData[];\n  // 이전 연도 시작 과정 정보 추가\n  prevYearStudents: number;\n  prevYearCompletedStudents: number;\n}\n\nexport interface CompletionRateDetails {\n  completionRate: number;\n  totalCourses: number;\n  validCourses: number;\n  excludedByDate: number;\n  excludedByZeroCompletion: number;\n  totalEnrollment: number;\n  totalCompletion: number;\n  details: {\n    currentDate: string;\n    year?: number;\n  };\n}\n\nexport interface NcsStat {\n  ncsName: string;\n  totalRevenue: number;\n  totalCourses: number;\n  totalStudents: number;\n  completedStudents: number;\n  completionRate: number;\n  avgSatisfaction: number;\n  courses: CourseData[];\n  // 이전 연도 시작 과정 정보 추가\n  prevYearStudents: number;\n  prevYearCompletedStudents: number;\n}\n\nexport interface LeadingCompanyStat {\n  leadingCompany: string;\n  totalRevenue: number;\n  totalCourses: number;\n  totalStudents: number;\n  completedStudents: number;\n  completionRate: number;\n  avgSatisfaction: number;\n  courses: CourseData[];\n}\n\nexport interface InstitutionExtraStats {\n  leadingCourseCount: number;\n  leadingRevenue: number;\n  techCourseCount: number;\n  techRevenue: number;\n  ncsTop: { ncsName: string; revenue: number; courses: number }[];\n  yearly: { year: number; revenue: number; students: number }[];\n}\n\n\n// 숫자 변환 유틸리티 함수들\nexport const parseNumber = (value: any): number => {\n  if (value === null || value === undefined || value === '') {\n    return 0;\n  }\n  \n  // 이미 숫자인 경우\n  if (typeof value === 'number' && !isNaN(value)) {\n    return value;\n  }\n  \n  // 문자열인 경우 정리 후 변환\n  if (typeof value === 'string') {\n    // 쉼표, 공백, 특수문자 제거\n    const cleaned = value.replace(/[,\\s%원]/g, '');\n    \n    // 빈 문자열이거나 숫자가 아닌 특수 문자만 있는 경우\n    if (cleaned === '' || cleaned === '-' || cleaned === 'N/A') {\n      return 0;\n    }\n    \n    const parsed = parseFloat(cleaned);\n    return isNaN(parsed) ? 0 : parsed;\n  }\n  \n  return 0;\n};\n\n// 퍼센트 값 파싱 (문자열 \"88.1%\" -> 88.1)\nexport const parsePercentage = (value: any): number => {\n  if (value === null || value === undefined || value === '') {\n    return 0;\n  }\n  \n  if (typeof value === 'number') {\n    return value;\n  }\n  \n  if (typeof value === 'string') {\n    const cleaned = value.replace(/[%\\s]/g, '');\n    if (cleaned === '' || cleaned === '-' || cleaned === 'N/A') {\n      return 0;\n    }\n    const parsed = parseFloat(cleaned);\n    return isNaN(parsed) ? 0 : parsed;\n  }\n  \n  return 0;\n};\n\n// 날짜 파싱\nexport const parseDate = (value: any): Date => {\n  if (value instanceof Date) {\n    return value;\n  }\n  \n  if (typeof value === 'string') {\n    const parsed = new Date(value);\n    return isNaN(parsed.getTime()) ? new Date() : parsed;\n  }\n  \n  return new Date();\n};\n\n// 훈련 유형 분류 함수 (Python의 classify_training_type 번역)\nexport const classifyTrainingType = (course: RawCourseData): string => {\n  const types: string[] = [];\n\n  // 파트너기관이 존재하면 '선도기업형 훈련' 유형 추가 (훈련기관과 동일 여부 무관)\n  const partnerInstitution = String(course.파트너기관 || '').trim();\n  if (partnerInstitution !== '' && partnerInstitution !== '0') {\n    types.push('선도기업형 훈련');\n  }\n\n  // 다른 유형 검사 (파트너기관 존재 여부와 관계없이)\n  const courseName = String(course.과정명 || '').trim();\n  if (courseName.includes('재직자_')) {\n    types.push('재직자 훈련');\n  }\n  const trainingInstitution = String(course.훈련기관 || '').trim();\n  if (trainingInstitution.includes('학교')) {\n    types.push('대학주도형 훈련');\n  }\n  if (courseName.includes('심화_')) {\n    types.push('심화 훈련');\n  }\n  if (courseName.includes('융합')) {\n    types.push('융합 훈련');\n  }\n\n  return types.length > 0 ? types.join('&') : '신기술 훈련';\n};\n\n// 숫자와 괄호 안 숫자 분리 유틸\nfunction parseNumberWithParen(str: any) {\n  if (typeof str === 'number') return { value: str, display: String(str), paren: null };\n  if (typeof str !== 'string') return { value: 0, display: '', paren: null };\n  const match = str.match(/^(\\d+)(?:\\((\\d+)\\))?$/);\n  if (match) {\n    return {\n      value: parseInt(match[1], 10),\n      display: str,\n      paren: match[2] ? parseInt(match[2], 10) : null\n    };\n  }\n  return { value: parseNumber(str), display: str, paren: null };\n}\n\n// 메인 데이터 변환 함수\nexport const transformRawDataToCourseData = (rawData: any): CourseData => {\n  // 과정 시작일과 종료일로부터 훈련 일수와 시간 계산\n  const startDate = parseDate(rawData.과정시작일 || rawData['과정시작일']);\n  const endDate = parseDate(rawData.과정종료일 || rawData['과정종료일']);\n  \n  // 날짜 차이 계산 (일수)\n  const timeDiff = endDate.getTime() - startDate.getTime();\n  const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n  const calculatedDays = daysDiff > 0 ? daysDiff : 0;\n\n  // 총훈련일수: 원본 값이 null/undefined/빈 문자열이 아닐 때만 원본 사용, 아니면 계산값 사용\n  let totalDays: number;\n  if (\n    rawData['총 훈련일수'] !== undefined &&\n    rawData['총 훈련일수'] !== null &&\n    String(rawData['총 훈련일수']).trim() !== ''\n  ) {\n    totalDays = parseNumber(rawData['총 훈련일수']);\n  } else {\n    totalDays = calculatedDays;\n  }\n\n  // 총훈련시간: 원본 값이 null/undefined/빈 문자열이 아닐 때만 원본 사용, 아니면 계산값 사용\n  let totalHours: number;\n  if (\n    rawData['총 훈련시간'] !== undefined &&\n    rawData['총 훈련시간'] !== null &&\n    String(rawData['총 훈련시간']).trim() !== ''\n  ) {\n    totalHours = parseNumber(rawData['총 훈련시간']);\n  } else {\n    totalHours = totalDays * 8;\n  }\n  \n  // 연도별 매출을 합산하여 누적매출 계산\n  let totalCumulativeRevenue = 0;\n  const yearColumns: Array<keyof RawCourseData> = ['2021년', '2022년', '2023년', '2024년', '2025년', '2026년'];\n  yearColumns.forEach(yearCol => {\n    totalCumulativeRevenue += parseNumber(rawData[yearCol]);\n  });\n\n  // 선도기업 과정 여부 판단\n  const isLeadingCompany = (String(rawData.파트너기관 || '').trim() !== '' && String(rawData.파트너기관 || '').trim() !== '0') &&\n                           (String(rawData.선도기업 || '').trim() !== '' && String(rawData.선도기업 || '').trim() !== '0');\n\n  // 조정된 연도별 매출 계산 (여기서는 원본 값을 복사, 최종 조정은 calculateInstitutionStats에서)\n  const adjustedYearlyRevenues: { [key: string]: number } = {};\n  yearColumns.forEach(yearCol => {\n    const originalRevenue = parseNumber(rawData[yearCol]);\n    adjustedYearlyRevenues[`조정_${yearCol}`] = originalRevenue; \n  });\n\n  const parsedEnrollment = parseNumberWithParen(rawData.수강신청인원 || rawData['수강신청인원'] || rawData['수강신청 인원']);\n  const parsedCompletion = parseNumberWithParen(rawData.수료인원 || rawData['수료인원']);\n\n  return {\n    고유값: rawData.고유값 || rawData['고유값'] || '',\n    과정명: rawData.과정명 || rawData['과정명'] || '',\n    과정상세: rawData.과정상세 || rawData['과정상세'] || '',\n    회차: rawData.회차 || rawData['회차'] || '',\n    훈련기관: rawData.훈련기관 || rawData['훈련기관'] || '',\n    파트너기관: rawData.파트너기관 || rawData['파트너기관'] || '',\n    선도기업: rawData.선도기업 || rawData['선도기업'] || '',\n    isLeadingCompanyCourse: isLeadingCompany,\n    leadingCompanyPartnerInstitution: isLeadingCompany ? (rawData.파트너기관 || rawData['파트너기관'] || '') : undefined,\n    '훈련과정 ID': rawData['훈련과정 ID'] || rawData.훈련과정ID || '',\n    \n    // 날짜 필드들\n    과정시작일: startDate.toISOString().split('T')[0],\n    과정종료일: endDate.toISOString().split('T')[0],\n\n    // 숫자 필드들 파싱\n    총훈련일수: totalDays,\n    총훈련시간: totalHours,\n    훈련비: parseNumber(rawData.훈련비 || rawData['훈련비']),\n    정원: parseNumber(rawData.정원 || rawData['정원']),\n    '수강신청 인원': parsedEnrollment.value,\n    수강신청_표시: parsedEnrollment.display,\n    수강신청_괄호: parsedEnrollment.paren,\n    '수료인원': parsedCompletion.value,\n    수료인원_표시: parsedCompletion.display,\n    수료인원_괄호: parsedCompletion.paren,\n    수료율: parsePercentage(rawData.수료율 || rawData['수료율']),\n    만족도: parsePercentage(rawData.만족도 || rawData['만족도']),\n    취업인원: parseNumber(rawData.취업인원 || rawData['취업인원']),\n    취업률: parsePercentage(rawData.취업률 || rawData['취업률']),\n    '취업인원 (3개월)': parseNumber(rawData['취업인원 (3개월)'] || rawData['취업인원(3개월)'] || 0),\n    '취업률 (3개월)': parsePercentage(rawData['취업률 (3개월)'] || rawData['취업률(3개월)'] || 0),\n    '취업인원 (6개월)': parseNumber(rawData['취업인원 (6개월)'] || rawData['취업인원(6개월)'] || 0),\n    '취업률 (6개월)': parsePercentage(rawData['취업률 (6개월)'] || rawData['취업률(6개월)'] || 0),\n    훈련연도: parseNumber(rawData.훈련연도 || rawData['훈련연도'] || new Date(rawData.과정시작일).getFullYear()),\n    훈련유형: classifyTrainingType(rawData as RawCourseData),\n    NCS명: String(rawData.NCS명 || rawData['NCS명'] || '').trim(),\n    NCS코드: String(rawData.NCS코드 || rawData['NCS코드'] || '').trim(),\n    \n    // 매출 관련 필드들\n    누적매출: totalCumulativeRevenue,\n    '실 매출 대비': parsePercentage(rawData.실매출대비 || rawData['실 매출 대비']),\n    '매출 최대': parseNumber(rawData.매출최대 || rawData['매출 최대']),\n    '매출 최소': parseNumber(rawData.매출최소 || rawData['매출 최소']),\n    \n    // 연도별 매출 데이터 및 조정된 연도별 매출\n    '2021년': parseNumber(rawData['2021년']),\n    '2022년': parseNumber(rawData['2022년']),\n    '2023년': parseNumber(rawData['2023년']),\n    '2024년': parseNumber(rawData['2024년']),\n    '2025년': parseNumber(rawData['2025년']),\n    '2026년': parseNumber(rawData['2026년']),\n    ...adjustedYearlyRevenues,\n\n    월별매출: rawData.월별매출 && typeof rawData.월별매출 === 'object' ? rawData.월별매출 : {},\n    월별수강인원: rawData.월별수강인원 && typeof rawData.월별수강인원 === 'object' ? rawData.월별수강인원 : {},\n    월별수료인원: rawData.월별수료인원 && typeof rawData.월별수료인원 === 'object' ? rawData.월별수료인원 : {},\n\n    과정페이지링크: String(\n      rawData.과정페이지링크 ||\n      rawData['과정페이지링크'] ||\n      rawData['과정페이지 링크'] ||\n      rawData['과정 페이지 링크'] ||\n      ''\n    ).trim(),\n  };\n};\n\nexport const transformRawDataArray = (rawDataArray: any[]): CourseData[] => {\n  let transformedData = rawDataArray.map(transformRawDataToCourseData);\n\n  // 1. 훈련과정 ID가 같으면 최신 과정명으로 업데이트\n  if (transformedData.length > 0 && '훈련과정 ID' in transformedData[0] && '과정시작일' in transformedData[0] && '과정명' in transformedData[0]) {\n    // 훈련과정 ID별로 최신 과정명 찾기\n    const latestCourseNames = new Map<string, string>();\n    \n    // 훈련과정 ID별로 그룹화하여 최신 과정명 찾기\n    const courseGroups = new Map<string, CourseData[]>();\n    transformedData.forEach(course => {\n      if (course['훈련과정 ID']) {\n        if (!courseGroups.has(course['훈련과정 ID'])) {\n          courseGroups.set(course['훈련과정 ID'], []);\n        }\n        courseGroups.get(course['훈련과정 ID'])!.push(course);\n      }\n    });\n\n    // 각 훈련과정 ID 그룹에서 훈련시작일이 가장 늦은 과정의 과정명을 최신 과정명으로 설정\n    courseGroups.forEach((courses, courseId) => {\n      const latestCourse = courses.reduce((latest, current) => {\n        return new Date(current.과정시작일) > new Date(latest.과정시작일) ? current : latest;\n      });\n      latestCourseNames.set(courseId, latestCourse.과정명);\n    });\n    \n    // 모든 과정에 최신 훈련명 적용 (중복 제거하지 않고 모든 과정 유지)\n    transformedData = transformedData.map(course => {\n      return {\n        ...course,\n        과정명: course['훈련과정 ID'] ? latestCourseNames.get(course['훈련과정 ID']) || course.과정명 : course.과정명\n      };\n    });\n  }\n\n  // 훈련기관 그룹화 적용 (원본 기관명 보존)\n  transformedData = transformedData.map(course => {\n    const originalInstitutionName = course.훈련기관; // 원본 기관명 보존\n    const groupedInstitutionName = groupInstitutionsAdvanced(course); // 그룹화된 기관명\n    \n    return {\n      ...course,\n      훈련기관: groupedInstitutionName, // 그룹화된 기관명으로 표시\n      원본훈련기관: originalInstitutionName // 원본 기관명 보존\n    };\n  });\n  \n  return transformedData;\n};\n\n// CSV 파싱시 사용할 Papaparse 옵션\nexport const csvParseOptions = {\n  header: true,\n  skipEmptyLines: true,\n  dynamicTyping: false, // 모든 값을 문자열로 읽어서 수동으로 변환\n  delimitersToGuess: [',', '\\t', '|', ';'],\n  trimHeaders: true, // 헤더의 공백을 제거합니다.\n  transform: (value: string, header: string) => {\n    // 헤더에서 공백 제거\n    if (typeof value === 'string') {\n      return value.trim();\n    }\n    return value;\n  }\n};\n\n// 데이터 검증 함수\nexport const validateCourseData = (data: CourseData): { isValid: boolean; errors: string[] } => {\n  const errors: string[] = [];\n  \n  if (!data.고유값) errors.push('고유값이 없습니다');\n  if (!data.훈련기관) errors.push('훈련기관이 없습니다');\n  if (data.훈련비 < 0) errors.push('훈련비가 음수입니다');\n  if (data.정원 < 0) errors.push('정원이 음수입니다');\n  if (data.과정종료일 < data.과정시작일) errors.push('과정 종료일이 시작일보다 빠릅니다');\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n// 개선된 수료율 계산 함수\nexport function calculateCompletionRate(data: CourseData[], year?: number): number {\n  if (!data.length || !('훈련과정 ID' in data[0])) {\n    console.warn(\"경고: '훈련과정 ID' 컬럼이 없어 과정별 평균 수료율을 계산할 수 없습니다.\");\n    return 0;\n  }\n  let filteredData = data;\n\n  if (year) {\n    // 해당 연도에 종료된 과정만 필터링\n    filteredData = data.filter(course => {\n      const endDate = new Date(course.과정종료일);\n      return endDate.getFullYear() === year;\n    });\n  }\n\n  // 수료인원이 0인 과정과 수강신청 인원이 0인 과정 제외\n  const validData = filteredData.filter(course => \n    course['수료인원'] > 0 && course['수강신청 인원'] > 0\n  );\n\n  if (validData.length === 0) {\n    return 0;\n  }\n\n  // 전체 수료인원 합계를 전체 수강신청 인원 합계로 나눔\n  const totalCompletion = validData.reduce((sum, course) => sum + course['수료인원'], 0);\n  const totalEnrollment = validData.reduce((sum, course) => sum + course['수강신청 인원'], 0);\n\n  if (totalEnrollment === 0) {\n    return 0; // 수강신청 인원이 0인 경우 0 반환\n  }\n\n  const completionRate = (totalCompletion / totalEnrollment) * 100;\n  return Number(completionRate.toFixed(1));\n}\n\n// 디버깅을 위한 상세 정보 반환 함수\nexport function calculateCompletionRateWithDetails(data: CourseData[], year?: number): CompletionRateDetails {\n  let filteredData = data;\n\n  if (year) {\n    // 해당 연도에 종료된 과정만 필터링\n    filteredData = data.filter(course => {\n      const endDate = new Date(course.과정종료일);\n      return endDate.getFullYear() === year;\n    });\n  }\n\n  // 수료인원이 0인 과정과 수강신청 인원이 0인 과정 제외\n  const validData = filteredData.filter(course => \n    course['수료인원'] > 0 && course['수강신청 인원'] > 0\n  );\n\n  const totalCompletion = validData.reduce((sum, course) => sum + course['수료인원'], 0);\n  const totalEnrollment = validData.reduce((sum, course) => sum + course['수강신청 인원'], 0);\n\n  const completionRate = totalEnrollment > 0 ? (totalCompletion / totalEnrollment) * 100 : 0;\n\n  return {\n    completionRate: Number(completionRate.toFixed(1)),\n    totalCourses: data.length,\n    validCourses: validData.length,\n    excludedByDate: 0, // 날짜 제외 로직 제거\n    excludedByZeroCompletion: data.length - validData.length,\n    totalEnrollment,\n    totalCompletion,\n    details: {\n      currentDate: new Date().toISOString().split('T')[0],\n      year\n    }\n  };\n}\n\n// 연도별 통계 계산\nexport function calculateYearlyStats(data: CourseData[], year: number): YearlyStats {\n  const yearData = data.filter(course => course.훈련연도 === year);\n  \n  const totalStudents = yearData.reduce((sum, course) => sum + course['수강신청 인원'], 0);\n  const completedStudents = yearData.reduce((sum, course) => sum + course['수료인원'], 0);\n  const revenue = yearData.reduce((sum, course) => sum + (course[`${year}년`] || 0), 0);\n\n  return {\n    year,\n    revenue,\n    totalStudents,\n    completedStudents,\n    courses: yearData\n  };\n}\n\n// 월별 통계 계산\nexport const calculateMonthlyStatistics = (\n  data: CourseData[],\n  year?: number | null\n): MonthlyStats[] => {\n  const monthlyMap = new Map<string, MonthlyStats>();\n\n  // 연도 범위 결정\n  const startYear = year ?? 2021;\n  const endYear = year ?? 2026; // 현재 날짜 대신 고정된 최대 연도 사용\n\n  // 선택된 연도 범위의 모든 월 초기화\n  for (let y = startYear; y <= endYear; y++) {\n    for (let i = 0; i < 12; i++) {\n      const monthName = `${y}-${String(i + 1).padStart(2, '0')}`;\n      monthlyMap.set(monthName, {\n        month: monthName,\n        revenue: 0,\n        totalStudents: 0,\n        completedStudents: 0,\n        courses: [],\n        completionRate: 0\n      });\n    }\n  }\n\n  // 훈련과정 ID별 수료율 평균 계산\n  const courseCompletionRates = new Map<string, number>();\n  data.forEach((course) => {\n    if ((course.수료인원 ?? 0) > 0 && course.훈련과정ID) {\n      const courseId = course.훈련과정ID;\n      const completionRate = (course.수료인원 ?? 0) / (course['수강신청 인원'] ?? 1) * 100;\n      if (!courseCompletionRates.has(courseId)) {\n        courseCompletionRates.set(courseId, completionRate);\n      } else {\n        const currentRate = courseCompletionRates.get(courseId)!;\n        courseCompletionRates.set(courseId, (currentRate + completionRate) / 2);\n      }\n    }\n  });\n\n  // 과정 시작일 기준으로 정렬 (기존 로직 유지)\n  const sortedData = [...data].sort((a, b) =>\n    new Date(a.과정시작일).getTime() - new Date(b.과정시작일).getTime()\n  );\n\n  sortedData.forEach((course) => {\n    const courseStartDate = new Date(course.과정시작일);\n    const courseEndDate = new Date(course.과정종료일);\n\n    // 선택된 연도에 해당하는 과정만 처리 (선택된 연도가 없으면 모든 연도 처리)\n    for (let y = startYear; y <= endYear; y++) {\n      const yearColumn = `${y}년` as keyof CourseData;\n      const adjustedRevenue = computeCourseRevenue(course, y); // 해당 연도의 조정된 매출을 가져옴\n\n      if (adjustedRevenue > 0) {\n        let monthsInThisCourseYear = 0;\n        const currentYearMonths: string[] = [];\n\n        const iterStartMonth = (y === courseStartDate.getFullYear()) ? courseStartDate.getMonth() : 0;\n        const iterEndMonth = (y === courseEndDate.getFullYear()) ? courseEndDate.getMonth() : 11;\n\n        for (let monthIndex = iterStartMonth; monthIndex <= iterEndMonth; monthIndex++) {\n          const monthStart = new Date(y, monthIndex, 1);\n          const monthEnd = new Date(y, monthIndex + 1, 0);\n\n          // 현재 월이 과정의 전체 기간 내에 포함되는지 확인\n          if (monthStart <= courseEndDate && monthEnd >= courseStartDate) {\n            monthsInThisCourseYear++;\n            currentYearMonths.push(`${y}-${String(monthIndex + 1).padStart(2, '0')}`);\n          }\n        }\n\n        if (monthsInThisCourseYear > 0) {\n          const revenuePerMonth = adjustedRevenue / monthsInThisCourseYear;\n          currentYearMonths.forEach(monthName => {\n            if (monthlyMap.has(monthName)) {\n              monthlyMap.get(monthName)!.revenue += revenuePerMonth;\n            }\n          });\n        }\n      }\n\n      // 학생 수 및 과정 정보는 과정 시작 월에만 추가 (기존 로직 유지)\n      const courseStartMonthName = `${courseStartDate.getFullYear()}-${String(courseStartDate.getMonth() + 1).padStart(2, '0')}`;\n      if (monthlyMap.has(courseStartMonthName) && courseStartDate.getFullYear() === y) {\n        const stats = monthlyMap.get(courseStartMonthName)!;\n        stats.totalStudents += course['수강신청 인원'] ?? 0;\n        stats.completedStudents += course.수료인원 ?? 0;\n        stats.courses.push(course);\n      }\n    }\n  });\n\n  // 각 월별 수료율 계산 (기존 로직 유지)\n  monthlyMap.forEach((stats) => {\n    if (stats.courses.length > 0) {\n      const validCourses = stats.courses.filter(course => (course.수료인원 ?? 0) > 0 && (course['수강신청 인원'] ?? 0) > 0);\n      if (validCourses.length > 0) {\n        const totalCompletion = validCourses.reduce((sum, course) => sum + (course.수료인원 ?? 0), 0);\n        const totalEnrollment = validCourses.reduce((sum, course) => sum + (course['수강신청 인원'] ?? 0), 0);\n        stats.completionRate = totalEnrollment > 0 ? (totalCompletion / totalEnrollment * 100) : 0;\n      }\n    }\n  });\n\n  return Array.from(monthlyMap.values()).sort((a, b) => {\n    const [aYear, aMonth] = a.month.split('-').map(Number);\n    const [bYear, bMonth] = b.month.split('-').map(Number);\n    return aYear === bYear ? aMonth - bMonth : aYear - bYear;\n  });\n};\n\n// 수료율에 따른 매출액 보정 계수 계산 함수\nfunction calculateRevenueAdjustmentFactor(completionRate: number): number {\n  let factor = 0;\n  if (completionRate >= 100) {\n    factor = 1.25; // 100% 이상일 때 1.25배\n  } else if (completionRate >= 75) {\n    // 75%에서 100% 사이는 선형적으로 1.0에서 1.25로 증가\n    factor = 1.0 + (0.25 * (completionRate - 75) / 25);\n  } else if (completionRate >= 50) {\n    // 50%에서 75% 사이는 선형적으로 0.75에서 1.0으로 증가\n    factor = 0.75 + (0.25 * (completionRate - 50) / 25);\n  } else {\n    // 50% 미만은 0.75배\n    factor = 0.75;\n  }\n  \n  return factor;\n}\n\nexport const calculateInstitutionStats = (data: CourseData[], year?: number): InstitutionStat[] => {\n  // 그룹명 기준으로 institutionNames 추출 (중복 제거)\n  const institutionNames = Array.from(new Set(data.map(course => groupInstitutionsAdvanced(course))));\n  const result: InstitutionStat[] = [];\n\n  institutionNames.forEach(institutionName => {\n    // 그룹명 기준으로 row를 모두 모음\n    const groupedCourses = data.filter(course => groupInstitutionsAdvanced(course) === institutionName);\n    // 상세보기와 동일하게 기관별 상세 매출 데이터 추출 (전체 데이터에서)\n    const detailed = calculateInstitutionDetailedRevenue(data, institutionName, year);\n    const aggregated = aggregateCoursesByCourseIdWithLatestInfo(detailed.courses, year, institutionName);\n    const totalRevenue = aggregated.reduce((sum, course) => sum + course.총누적매출, 0);\n    // 파트너기관이 대체한 운영기관(선도기업 과정에서 훈련기관이지만 파트너기관이 존재하는 경우)은 훈련생수/수료인원/과정수 집계에서 제외\n    const validForCount = detailed.courses.filter(course => {\n      const isLeadingWithPartner = course.isLeadingCompanyCourse && course.leadingCompanyPartnerInstitution;\n      if (isLeadingWithPartner && (course.원본훈련기관 || course.훈련기관) === institutionName) return false;\n      return true;\n    });\n    const totalStudents = validForCount.reduce((sum, course) => sum + (course['수강신청 인원'] ?? 0), 0);\n    const completedStudents = validForCount.reduce((sum, course) => sum + (course['수료인원'] ?? 0), 0);\n    const totalCourses = validForCount.length;\n    // 수료인원이 0명인 과정은 제외하고 계산\n    const validCompletion = detailed.courses.filter(course => {\n      const isLeadingWithPartner = course.isLeadingCompanyCourse && course.leadingCompanyPartnerInstitution;\n      if (isLeadingWithPartner && (course.원본훈련기관 || course.훈련기관) === institutionName) return false;\n      return course['수료인원'] > 0 && course['수강신청 인원'] > 0;\n    });\n    const totalValidStudents = validCompletion.reduce((sum, course) => sum + (course['수강신청 인원'] ?? 0), 0);\n    const totalValidGraduates = validCompletion.reduce((sum, course) => sum + (course['수료인원'] ?? 0), 0);\n    const completionRate = totalValidStudents > 0 ? (totalValidGraduates / totalValidStudents) * 100 : 0;\n    // 평균 만족도: 0이 아닌 과정, 수료인원 1명 이상, 파트너기관이 대체한 운영기관은 제외\n    const validSatisfaction = detailed.courses.filter(course => {\n      const isLeadingWithPartner = course.isLeadingCompanyCourse && course.leadingCompanyPartnerInstitution;\n      if (isLeadingWithPartner && (course.원본훈련기관 || course.훈련기관) === institutionName) return false;\n      return course.만족도 && course.만족도 > 0 && course['수료인원'] > 0;\n    });\n    const totalWeighted = validSatisfaction.reduce((sum, course) => sum + (course.만족도 ?? 0) * (course['수료인원'] ?? 0), 0);\n    const totalWeight = validSatisfaction.reduce((sum, course) => sum + (course['수료인원'] ?? 0), 0);\n    const avgSatisfaction = totalWeight > 0 ? totalWeighted / totalWeight : 0;\n    // 이전 연도 시작 과정 정보 계산 (기존 방식 유지)\n    let prevYearStudents = 0;\n    let prevYearCompletedStudents = 0;\n    if (year !== undefined) {\n      const prevYearCourses = groupedCourses.filter(course => {\n        const courseInstitution = course.원본훈련기관 || course.훈련기관;\n        const coursePartner = course.leadingCompanyPartnerInstitution;\n        const isTrainingInstitution = courseInstitution === institutionName;\n        const isPartnerInstitution = coursePartner === institutionName;\n        return (isTrainingInstitution || isPartnerInstitution) &&\n               new Date(course.과정시작일).getFullYear() < year &&\n               new Date(course.과정종료일).getFullYear() === year;\n      });\n      prevYearCourses.forEach(course => {\n        let studentCount = course['수강신청 인원'] ?? 0;\n        let completedCount = course.수료인원 ?? 0;\n        if (course.isLeadingCompanyCourse && course.leadingCompanyPartnerInstitution) {\n          const courseInstitution = course.원본훈련기관 || course.훈련기관;\n          if (courseInstitution === institutionName) {\n            studentCount = 0;\n            completedCount = 0;\n          }\n        }\n        prevYearStudents += studentCount;\n        prevYearCompletedStudents += completedCount;\n      });\n    }\n    result.push({\n      institutionName,\n      totalRevenue: totalRevenue ?? 0,\n      totalCourses: typeof totalCourses === 'number' && !isNaN(totalCourses) ? totalCourses : 0,\n      totalStudents: typeof totalStudents === 'number' && !isNaN(totalStudents) ? totalStudents : 0,\n      completedStudents: typeof completedStudents === 'number' && !isNaN(completedStudents) ? completedStudents : 0,\n      completionRate: typeof completionRate === 'number' && !isNaN(completionRate) ? completionRate : 0,\n      avgSatisfaction: typeof avgSatisfaction === 'number' && !isNaN(avgSatisfaction) ? avgSatisfaction : 0,\n      courses: detailed.courses,\n      prevYearStudents: typeof prevYearStudents === 'number' && !isNaN(prevYearStudents) ? prevYearStudents : 0,\n      prevYearCompletedStudents: typeof prevYearCompletedStudents === 'number' && !isNaN(prevYearCompletedStudents) ? prevYearCompletedStudents : 0\n    });\n  });\n\n  // 매출액 기준 내림차순 정렬\n  return result.sort((a, b) => b.totalRevenue - a.totalRevenue);\n};\n\n// === Helper: Compute course revenue with the same rules used in calculateInstitutionStats ===\nexport const computeCourseRevenue = (\n  course: CourseData,\n  year?: number,\n): number => {\n  // If a specific year is requested, use only that year's revenue columns; otherwise sum all.\n  if (year) {\n    const yearlyKey = `${year}년` as keyof CourseData;\n    const adjKey = `조정_${year}년` as keyof CourseData;\n    let baseRevenue: number = (course[adjKey] as number) ?? (course[yearlyKey] as number) ?? 0;\n\n    // 수료율에 따른 추가 조정 (이미 조정된 경우 스킵)\n    const alreadyAdjusted = typeof course[adjKey] === 'number';\n    if (!alreadyAdjusted) {\n      baseRevenue *= calculateRevenueAdjustmentFactor(course['수료율'] ?? 0);\n    }\n    return baseRevenue;\n  }\n\n  const yearColumns = ['2021년', '2022년', '2023년', '2024년', '2025년', '2026년'] as const;\n  const adjustedCols = yearColumns.map(col => `조정_${col}`); // as keyof CourseData 제거\n\n  // 1) 조정된 연도별 매출의 합계 (누적매출로 대체)\n  let baseRevenue = adjustedCols.reduce((sum, key) => {\n    return sum + parseNumber(course[key as keyof CourseData]); // key를 CourseData의 유효한 키로 캐스팅\n  }, 0);\n  if (baseRevenue === 0) {\n    if (typeof course.조정_실매출대비 === 'number') {\n      baseRevenue = course.조정_실매출대비;\n    } else if (typeof course['실 매출 대비'] === 'number') {\n      baseRevenue = course['실 매출 대비'];\n    } else if (course.누적매출 !== undefined) {\n      baseRevenue = course.누적매출;\n    }\n  }\n\n  // 3) 수료율에 따른 보정 (이미 조정된 경우 스킵)\n  const alreadyAdjusted = Object.keys(course).some(k => k.startsWith('조정_'));\n  if (!alreadyAdjusted) {\n    baseRevenue *= calculateRevenueAdjustmentFactor(course['수료율'] ?? 0);\n  }\n  return baseRevenue;\n};\n\n// === Aggregator for detail modal (share-aware) ===\nexport const aggregateCoursesByCourseNameForInstitution = (\n  courses: CourseData[],\n  institutionName: string,\n  year?: number,\n): AggregatedCourseData[] => {\n  const map = new Map<string, AggregatedCourseData>();\n\n  // 훈련과정ID별로 최신 과정명 찾기\n  const latestCourseNames = new Map<string, string>();\n  courses.forEach(course => {\n    if (course['훈련과정 ID']) {\n      const existing = latestCourseNames.get(course['훈련과정 ID']);\n      if (!existing || new Date(course.과정시작일) > new Date(existing)) {\n        latestCourseNames.set(course['훈련과정 ID'], course.과정명);\n      }\n    }\n  });\n\n  // === year가 지정된 경우 해당 연도 시작 과정만 합산 ===\n  const filteredCourses = year !== undefined\n    ? courses.filter(c => new Date(c.과정시작일).getFullYear() === year)\n    : courses;\n\n  filteredCourses.forEach(course => {\n    let revenueShare = 1;\n    let studentShare = 1;\n    if (course.isLeadingCompanyCourse && course.leadingCompanyPartnerInstitution) {\n      if (institutionName === course.leadingCompanyPartnerInstitution) {\n        revenueShare = 0.9;\n        studentShare = 1;\n      } else if (institutionName === course.훈련기관) {\n        revenueShare = 0.1;\n        studentShare = 0; // 선도기업은 훈련생 수 없음\n      } else {\n        revenueShare = 0;\n        studentShare = 0;\n      }\n    }\n    if (revenueShare === 0 && studentShare === 0) return;\n\n    // 실제 매출 값\n    const revenueBase =\n      (typeof course['조정_실매출대비'] === 'number' && course['조정_실매출대비']! > 0)\n        ? course['조정_실매출대비'] as number\n        : (typeof course['실 매출 대비'] === 'number' ? course['실 매출 대비'] as number : 0);\n    const revenue = revenueBase * revenueShare;\n\n    const key = course.과정명;\n    if (!map.has(key)) {\n      map.set(key, {\n        과정명: key,\n        총수강신청인원: 0,\n        총수료인원: 0,\n        총누적매출: 0,\n        최소과정시작일: course.과정시작일,\n        최대과정종료일: course.과정종료일,\n        훈련유형들: [],\n        원천과정수: 0,\n        총훈련생수: 0,\n        평균만족도: 0,\n        평균수료율: 0, // 초기화\n      });\n    }\n\n    const agg = map.get(key)!;\n\n    // 수료율 및 만족도 계산을 위한 임시 변수\n    const internal = agg as any;\n    if (internal._completionEnrollmentSum === undefined) {\n      internal._completionEnrollmentSum = 0;\n      internal._completionSum = 0;\n      internal._completionWeight = 0; // 수료율 가중치 추가\n      internal._satSum = 0;\n      internal._satWeight = 0;\n    }\n\n    // 수료인원이 0이 아닌 경우에만 수료율 계산 모수에 포함\n    if ((course['수료인원'] ?? 0) > 0 && (course['수강신청 인원'] ?? 0) > 0) {\n      internal._completionEnrollmentSum += course['수강신청 인원'] ?? 0;\n      internal._completionSum += course['수료인원'] ?? 0;\n      internal._completionWeight += 1;\n    }\n\n    // 만족도 평균 (만족도가 0이 아닌 경우에만 모수에 포함)\n    if (course.만족도 && course.만족도 > 0) {\n      internal._satSum += course.만족도;\n      internal._satWeight += 1;\n    }\n\n    // === year가 지정된 경우 해당 연도 시작 과정만 집계 ===\n    agg.총수강신청인원 += course['수강신청 인원'];\n    agg.총수료인원 += course['수료인원'];\n    const revenueForSum =\n      course.조정_실매출대비 ??\n      (course.누적매출 ?? 0);\n    agg.총누적매출 += revenueForSum;\n    agg.총훈련생수 += course['수강신청 인원'];\n    agg.원천과정수 += 1;\n\n    // 최종 평균 계산\n    agg.평균만족도 = internal._satWeight > 0 ? internal._satSum / internal._satWeight : 0;\n    agg.평균수료율 = internal._completionWeight > 0 ? (internal._completionSum / internal._completionEnrollmentSum) * 100 : 0;\n\n    // 훈련 유형\n    if (course.훈련유형 && !agg.훈련유형들.includes(course.훈련유형)) {\n      agg.훈련유형들.push(course.훈련유형);\n    }\n\n    // 날짜 업데이트\n    if (new Date(course.과정시작일) < new Date(agg.최소과정시작일)) {\n      agg.최소과정시작일 = course.과정시작일;\n    }\n    if (new Date(course.과정종료일) > new Date(agg.최대과정종료일)) {\n      agg.최대과정종료일 = course.과정종료일;\n    }\n  });\n\n  return Array.from(map.values()).sort((a, b) => b.총누적매출 - a.총누적매출);\n};\n\n// NCS별 통계 계산\nexport const calculateNcsStats = (data: CourseData[], year?: number): NcsStat[] => {\n  const map = new Map<string, {\n    totalRevenue: number;\n    totalCourses: number;\n    totalStudents: number;\n    completedStudents: number;\n    satisfactionSum: number;\n    satisfactionCoursesCount: number;\n    courses: CourseData[];\n    prevYearStudents: number;\n    prevYearCompletedStudents: number;\n  }>();\n\n  data.forEach(course => {\n    const key = course.NCS명 || '기타';\n    if (!map.has(key)) {\n      map.set(key, {\n        totalRevenue: 0,\n        totalCourses: 0,\n        totalStudents: 0,\n        completedStudents: 0,\n        satisfactionSum: 0,\n        satisfactionCoursesCount: 0,\n        courses: [],\n        prevYearStudents: 0,\n        prevYearCompletedStudents: 0\n      });\n    }\n    const stat = map.get(key)!;\n\n    // 매출 계산\n    let revenue = 0;\n    if (year !== undefined) {\n      const yearKey = `조정_${year}년` as keyof CourseData;\n      revenue = (course[yearKey] as number | undefined) ?? 0;\n    } else {\n      revenue = course.조정_누적매출 ?? course.누적매출 ?? 0;\n    }\n    stat.totalRevenue += revenue;\n\n    // === 통계는 '과정 시작 연도' 기준으로만 합산 ===\n    const courseStartYear = new Date(course.과정시작일).getFullYear();\n    const courseEndYear = new Date(course.과정종료일).getFullYear();\n    \n    if (year === undefined || courseStartYear === year) {\n      stat.totalStudents += course['수강신청 인원'] ?? 0;\n      stat.completedStudents += course['수료인원'] ?? 0;\n      if ((course.만족도 ?? 0) > 0) {\n        stat.satisfactionSum += course.만족도 ?? 0;\n        stat.satisfactionCoursesCount += 1;\n      }\n      stat.totalCourses += 1;\n    } else if (year !== undefined && courseStartYear < year && courseEndYear === year) {\n      // 이전 연도에 시작해서 해당 연도에 종료된 과정\n      stat.prevYearStudents += course['수강신청 인원'] ?? 0;\n      stat.prevYearCompletedStudents += course['수료인원'] ?? 0;\n    }\n    stat.courses.push(course);\n  });\n\n  const result: NcsStat[] = Array.from(map.entries()).map(([name, stats]) => {\n    const {\n      totalRevenue, totalCourses, totalStudents, completedStudents,\n      satisfactionSum, satisfactionCoursesCount, courses,\n      prevYearStudents, prevYearCompletedStudents\n    } = stats;\n\n    // === 수료율 계산: 해당 연도 시작 과정 + 이전 연도 시작하여 해당 연도 종료된 과정 ===\n    let validCompletedStudents = 0;\n    let validTotalStudents = 0;\n    if (year !== undefined) {\n      courses.forEach(course => {\n        const courseStartYear = new Date(course.과정시작일).getFullYear();\n        const courseEndYear = new Date(course.과정종료일).getFullYear();\n        \n        // 해당 연도에 시작한 과정이거나 이전 연도에 시작해서 해당 연도에 종료된 과정\n        if ((courseStartYear === year || (courseStartYear < year && courseEndYear === year)) &&\n            (course.수료인원 ?? 0) > 0 && (course['수강신청 인원'] ?? 0) > 0) {\n          validCompletedStudents += course.수료인원;\n          validTotalStudents += course['수강신청 인원'];\n        }\n      });\n    } else {\n      courses.forEach(course => {\n        if ((course.수료인원 ?? 0) > 0 && (course['수강신청 인원'] ?? 0) > 0) {\n          validCompletedStudents += course.수료인원;\n          validTotalStudents += course['수강신청 인원'];\n        }\n      });\n    }\n    const completionRate = validTotalStudents > 0 ? (validCompletedStudents / validTotalStudents) * 100 : 0;\n\n    return {\n      ncsName: name,\n      totalRevenue,\n      totalCourses,\n      totalStudents,\n      completedStudents,\n      completionRate,\n      avgSatisfaction: satisfactionCoursesCount > 0 ? satisfactionSum / satisfactionCoursesCount : 0,\n      courses,\n      prevYearStudents,\n      prevYearCompletedStudents\n    };\n  });\n\n  return result.sort((a, b) => b.totalRevenue - a.totalRevenue);\n};\n\n// NCS별 상세 모달용 Aggregator (과정명 기준)\nexport const aggregateCoursesByCourseNameForNcs = (\n  courses: CourseData[],\n  ncsName: string,\n  year?: number,\n): AggregatedCourseData[] => {\n  const filtered = courses.filter(c => (c.NCS명 || '기타') === ncsName && (year ? new Date(c.과정시작일).getFullYear() === year : true));\n  return aggregateCoursesByCourseName(filtered);\n};\n\n// === Aggregator using 실제 매출(실 매출 대비) ===\nexport const aggregateCoursesByCourseNameActualRevenue = (\n  courses: CourseData[],\n  institutionName: string,\n): AggregatedCourseData[] => {\n  const map = new Map<string, AggregatedCourseData>();\n\n  // 훈련과정ID별로 최신 과정명 찾기\n  const latestCourseNames = new Map<string, string>();\n  courses.forEach(course => {\n    if (course.훈련과정ID) {\n      const existing = latestCourseNames.get(course.훈련과정ID);\n      if (!existing || new Date(course.과정시작일) > new Date(existing)) {\n        latestCourseNames.set(course.훈련과정ID, course.과정명);\n      }\n    }\n  });\n\n  courses.forEach(course => {\n    // 지분 계산 (매출 90/10, 학생 100/0)\n    let revenueShare = 1;\n    let studentShare = 1;\n    if (course.isLeadingCompanyCourse && course.leadingCompanyPartnerInstitution) {\n      if (institutionName === course.leadingCompanyPartnerInstitution) {\n        revenueShare = 0.9;\n        studentShare = 1;\n      } else if (institutionName === course.훈련기관) {\n        revenueShare = 0.1;\n        studentShare = 0; // 선도기업은 학생 수 없음\n      } else {\n        revenueShare = 0;\n        studentShare = 0;\n      }\n    }\n    if (revenueShare === 0 && studentShare === 0) return;\n\n    // 공통적으로 계산한 단일 매출값 (일할/수료율 보정 포함)\n    const revenue = computeCourseRevenue(course) * revenueShare;\n\n    const key = course.훈련과정ID || course.과정명; // 훈련과정ID를 우선 사용, 없으면 과정명 사용\n    if (!map.has(key)) {\n      // 훈련과정ID가 있는 경우 최신 과정명 사용, 없는 경우 원본 과정명 사용\n      const displayName = course.훈련과정ID ? (latestCourseNames.get(course.훈련과정ID) || course.과정명) : course.과정명;\n      \n      map.set(key, {\n        과정명: displayName,\n        '훈련과정 ID': course['훈련과정 ID'], // 훈련과정 ID 추가\n        총수강신청인원: 0,\n        총수료인원: 0,\n        총누적매출: 0,\n        최소과정시작일: course.과정시작일,\n        최대과정종료일: course.과정종료일,\n        훈련유형들: [],\n        원천과정수: 0,\n        총훈련생수: 0,\n        평균만족도: 0,\n        평균수료율: 0, // 초기화\n      });\n    }\n\n    const agg = map.get(key)!;\n\n    // 수료율 및 만족도 계산을 위한 임시 변수\n    const internal = agg as any;\n    if (internal._completionEnrollmentSum === undefined) {\n      internal._completionEnrollmentSum = 0;\n      internal._completionSum = 0;\n      internal._completionWeight = 0; // 수료율 가중치 추가\n      internal._satSum = 0;\n      internal._satWeight = 0;\n    }\n\n    // 수료인원이 0이 아닌 경우에만 수료율 계산 모수에 포함\n    if ((course['수료인원'] ?? 0) > 0 && (course['수강신청 인원'] ?? 0) > 0) {\n      internal._completionEnrollmentSum += course['수강신청 인원'] ?? 0;\n      internal._completionSum += course['수료인원'] ?? 0;\n      internal._completionWeight += 1;\n    }\n\n    // 만족도 평균 (만족도가 0이 아닌 경우에만 모수에 포함)\n    if (course.만족도 && course.만족도 > 0) {\n      internal._satSum += course.만족도;\n      internal._satWeight += 1;\n    }\n\n    // 기존 로직 유지\n    agg.총수강신청인원 += course['수강신청 인원'];\n    agg.총수료인원 += course['수료인원'];\n    const revenueForSum =\n      course.조정_실매출대비 ??\n      (course.누적매출 ?? 0);\n    agg.총누적매출 += revenueForSum;\n    agg.총훈련생수 += course['수강신청 인원'];\n    agg.원천과정수 += 1;\n\n    // 최종 평균 계산\n    agg.평균만족도 = internal._satWeight > 0 ? internal._satSum / internal._satWeight : 0;\n    agg.평균수료율 = internal._completionWeight > 0 ? (internal._completionSum / internal._completionEnrollmentSum) * 100 : 0;\n\n    // 훈련 유형\n    if (course.훈련유형 && !agg.훈련유형들.includes(course.훈련유형)) {\n      agg.훈련유형들.push(course.훈련유형);\n    }\n\n    // 날짜 업데이트\n    if (new Date(course.과정시작일) < new Date(agg.최소과정시작일)) {\n      agg.최소과정시작일 = course.과정시작일;\n    }\n    if (new Date(course.과정종료일) > new Date(agg.최대과정종료일)) {\n      agg.최대과정종료일 = course.과정종료일;\n    }\n  });\n\n  // NOTE: _satSum / _satWeight 내부 키는 반환 이전에 굳이 제거할 필요가 없지만, 타입 안전을 위해 삭제.\n  // map.forEach(agg => { delete (agg as any)._satSum; delete (agg as any)._satWeight; });\n\n  return Array.from(map.values()).sort((a, b) => b.총누적매출 - a.총누적매출);\n};\n\n// === Leading Company stats ===\nexport const calculateLeadingCompanyStats = (\n  data: CourseData[],\n  year?: number,\n): LeadingCompanyStat[] => {\n  // 필터: 선도기업 과정만\n  const filteredAll = data.filter((c) => c.isLeadingCompanyCourse);\n  const filtered = year\n    ? filteredAll.filter((c) => new Date(c.과정시작일).getFullYear() === year)\n    : filteredAll;\n\n  const map = new Map<string, LeadingCompanyStat>();\n\n  filtered.forEach((course) => {\n    const key = course.선도기업 || '기타';\n    if (!map.has(key)) {\n      map.set(key, {\n        leadingCompany: key,\n        totalRevenue: 0,\n        totalCourses: 0,\n        totalStudents: 0,\n        completedStudents: 0,\n        completionRate: 0,\n        avgSatisfaction: 0,\n        courses: [],\n      });\n    }\n    const stat = map.get(key)!;\n    stat.totalRevenue += course.조정_누적매출 ?? course.누적매출 ?? 0;\n    stat.totalCourses += 1;\n    stat.totalStudents += course['수강신청 인원'] ?? 0;\n    stat.completedStudents += course['수료인원'] ?? 0;\n    stat.courses.push(course);\n    const idx = stat.courses.length;\n    stat.avgSatisfaction = ((stat.avgSatisfaction * (idx - 1)) + (course.만족도 || 0)) / idx;\n  });\n\n  map.forEach((stat) => {\n    stat.completionRate = stat.totalStudents > 0 ? (stat.completedStudents / stat.totalStudents) * 100 : 0;\n  });\n\n  return Array.from(map.values()).sort((a, b) => b.totalRevenue - a.totalRevenue);\n};\n\nexport const aggregateCoursesByCourseNameForLeadingCompany = (\n  courses: CourseData[],\n  leadingCompany: string,\n  year?: number,\n): AggregatedCourseData[] => {\n  const filtered = courses.filter(\n    (c) => c.isLeadingCompanyCourse && (c.선도기업 || '기타') === leadingCompany && (year ? new Date(c.과정시작일).getFullYear() === year : true),\n  );\n  return aggregateCoursesByCourseName(filtered);\n};\n\n// 테스트 함수\nexport function testCompletionRateCalculation() {\n  const testData: CourseData[] = [\n    {\n      고유값: \"test1\",\n      훈련기관: \"기관A\",\n      과정명: \"과정1\",\n      과정시작일: \"2024-01-01\",\n      과정종료일: \"2024-03-01\", // 3주 이전 종료\n      '수강신청 인원': 20,\n      '수료인원': 18,\n      누적매출: 1000000,\n      총훈련일수: 60,\n      총훈련시간: 480,\n      훈련비: 1000000,\n      정원: 25,\n      '수료율': 90,\n      만족도: 85,\n      취업인원: 15,\n      취업률: 75,\n      '취업인원 (3개월)': 12,\n      '취업률 (3개월)': 60,\n      '취업인원 (6개월)': 15,\n      '취업률 (6개월)': 75,\n      훈련연도: 2024,\n      훈련유형: \"일반\",\n      NCS명: \"테스트\",\n    },\n    {\n      고유값: \"test2\",\n      훈련기관: \"기관B\",\n      과정명: \"과정2\",\n      과정종료일: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 10일 전 종료 (제외되어야 함)\n      과정시작일: \"2024-01-01\",\n      '수강신청 인원': 15,\n      '수료인원': 12,\n      누적매출: 500000,\n      총훈련일수: 30,\n      총훈련시간: 240,\n      훈련비: 500000,\n      정원: 20,\n      '수료율': 80,\n      만족도: 80,\n      취업인원: 10,\n      취업률: 67,\n      '취업인원 (3개월)': 8,\n      '취업률 (3개월)': 53,\n      '취업인원 (6개월)': 10,\n      '취업률 (6개월)': 67,\n      훈련연도: 2024,\n      훈련유형: \"일반\",\n      NCS명: \"테스트\",\n    },\n    {\n      고유값: \"test3\",\n      훈련기관: \"기관C\",\n      과정명: \"과정3\",\n      과정종료일: \"2024-02-01\", // 3주 이전 종료\n      과정시작일: \"2024-01-01\",\n      '수강신청 인원': 10,\n      '수료인원': 0, // 수료인원 0 (제외되어야 함)\n      누적매출: 0,\n      총훈련일수: 30,\n      총훈련시간: 240,\n      훈련비: 500000,\n      정원: 15,\n      '수료율': 0,\n      만족도: 0,\n      취업인원: 0,\n      취업률: 0,\n      '취업인원 (3개월)': 0,\n      '취업률 (3개월)': 0,\n      '취업인원 (6개월)': 0,\n      '취업률 (6개월)': 0,\n      훈련연도: 2024,\n      훈련유형: \"일반\",\n      NCS명: \"테스트\",\n    }\n  ];\n\n  console.log('=== 수료율 계산 테스트 ===');\n  \n  const result = calculateCompletionRateWithDetails(testData, 2024);\n  console.log('상세 결과:', result);\n  \n  const simpleResult = calculateCompletionRate(testData, 2024);\n  console.log('간단 결과:', simpleResult);\n  \n  // 예상 결과: test1만 유효 (18/20 = 90%)\n  console.log('예상 수료율: 90%');\n  \n  // 기관별 통계 테스트\n  console.log('\\n=== 기관별 통계 ===');\n  const institutionStats = calculateInstitutionStats(testData);\n  console.log('기관별 통계:', institutionStats);\n}\n\n// 사용 예시\nexport const exampleUsage = () => {\n  // 예시 원본 데이터 (CSV에서 읽어온 것처럼)\n  const rawData = {\n    고유값: \"AIG202300004555885\",\n    과정명: \"클라우드 기반 빅데이터 융합 자바(JAVA) 풀스택개발자 양성과정\",\n    총훈련일수: \"180\", // 문자열\n    총훈련시간: \"1440\", // 문자열\n    훈련비: \"9,097,920\", // 쉼표가 포함된 문자열\n    정원: \"25\", // 문자열\n    수료율: \"85.5%\", // 퍼센트 문자열\n    만족도: \"88.1\", // 문자열\n    과정시작일: \"2025-04-30\",\n    과정종료일: \"2025-10-28\"\n  };\n  \n  // 변환\n  const transformedData = transformRawDataToCourseData(rawData);\n  \n  console.log('변환된 데이터:', transformedData);\n  \n  // 검증\n  const validation = validateCourseData(transformedData);\n  console.log('검증 결과:', validation);\n};\n\n// 기본 내보내기\nexport default {\n  parseNumber,\n  parsePercentage,\n  parseDate,\n  transformRawDataToCourseData,\n  transformRawDataArray,\n  calculateCompletionRate,\n  calculateCompletionRateWithDetails,\n  calculateYearlyStats,\n  calculateMonthlyStatistics,\n  calculateInstitutionStats,\n  validateCourseData,\n  csvParseOptions,\n  testCompletionRateCalculation,\n  exampleUsage\n};\n\nexport const aggregateCoursesByCourseName = (courses: CourseData[]): AggregatedCourseData[] => {\n  const aggregatedMap = new Map<string, AggregatedCourseData>();\n\n  // 훈련과정ID별로 최신 과정명 찾기\n  const latestCourseNames = new Map<string, string>();\n  courses.forEach(course => {\n    if (course.훈련과정ID) {\n      const existing = latestCourseNames.get(course.훈련과정ID);\n      if (!existing || new Date(course.과정시작일) > new Date(existing)) {\n        latestCourseNames.set(course.훈련과정ID, course.과정명);\n      }\n    }\n  });\n\n  courses.forEach(course => {\n    const key = course.훈련과정ID || course.과정명; // 훈련과정ID를 우선 사용, 없으면 과정명 사용\n    if (!aggregatedMap.has(key)) {\n      // 훈련과정ID가 있는 경우 최신 과정명 사용, 없는 경우 원본 과정명 사용\n      const displayName = course.훈련과정ID ? (latestCourseNames.get(course.훈련과정ID) || course.과정명) : course.과정명;\n      \n      aggregatedMap.set(key, {\n        과정명: displayName,\n        '훈련과정 ID': course['훈련과정 ID'], // 훈련과정 ID 추가\n        총수강신청인원: 0,\n        총수료인원: 0,\n        총누적매출: 0,\n        최소과정시작일: course.과정시작일,\n        최대과정종료일: course.과정종료일,\n        훈련유형들: [],\n        원천과정수: 0,\n        총훈련생수: 0,\n        평균만족도: 0,\n        평균수료율: 0, // 초기화\n      });\n    }\n    const aggregatedCourse = aggregatedMap.get(key)!;\n\n    // 수료율 및 만족도 계산을 위한 임시 변수\n    const internal = aggregatedCourse as any;\n    if (internal._completionEnrollmentSum === undefined) {\n      internal._completionEnrollmentSum = 0;\n      internal._completionSum = 0;\n      internal._completionWeight = 0;\n      internal._satSum = 0;\n      internal._satWeight = 0;\n    }\n\n    // 수료인원이 0이 아닌 경우에만 수료율 계산 모수에 포함\n    if ((course['수료인원'] ?? 0) > 0 && (course['수강신청 인원'] ?? 0) > 0) {\n      internal._completionEnrollmentSum += course['수강신청 인원'] ?? 0;\n      internal._completionSum += course['수료인원'] ?? 0;\n      internal._completionWeight += 1;\n    }\n\n    // 만족도 평균 (만족도가 0이 아닌 경우에만 모수에 포함)\n    if (course.만족도 && course.만족도 > 0) {\n      internal._satSum += course.만족도;\n      internal._satWeight += 1;\n    }\n\n    // 기존 로직 유지\n    aggregatedCourse.총수강신청인원 += course['수강신청 인원'];\n    aggregatedCourse.총수료인원 += course['수료인원'];\n    const revenueForSum =\n      course.조정_실매출대비 ??\n      (course.누적매출 ?? 0);\n    aggregatedCourse.총누적매출 += revenueForSum;\n    aggregatedCourse.총훈련생수 += course['수강신청 인원'];\n    aggregatedCourse.원천과정수 += 1;\n\n    // 최종 평균 계산\n    aggregatedCourse.평균만족도 = internal._satWeight > 0 ? internal._satSum / internal._satWeight : 0;\n    aggregatedCourse.평균수료율 = internal._completionWeight > 0 ? (internal._completionSum / internal._completionEnrollmentSum) * 100 : 0;\n\n    // 훈련 유형\n    if (course.훈련유형 && !aggregatedCourse.훈련유형들.includes(course.훈련유형)) {\n      aggregatedCourse.훈련유형들.push(course.훈련유형);\n    }\n\n    // 날짜 업데이트\n    if (new Date(course.과정시작일) < new Date(aggregatedCourse.최소과정시작일)) {\n      aggregatedCourse.최소과정시작일 = course.과정시작일;\n    }\n    if (new Date(course.과정종료일) > new Date(aggregatedCourse.최대과정종료일)) {\n      aggregatedCourse.최대과정종료일 = course.과정종료일;\n    }\n  });\n\n  return Array.from(aggregatedMap.values()).sort((a, b) => b.총누적매출 - a.총누적매출);\n};\n\n// 그룹핑 기준을 외부로 분리\nexport const institutionGroups: { [key: string]: string[] } = {\n  '이젠아카데미': ['이젠', '이젠컴퓨터학원', '이젠아이티아카데미'],\n  '그린컴퓨터아카데미': ['그린', '그린컴퓨터아카데미', '그린아카데미컴퓨터학원'],\n  '더조은아카데미': ['더조은', '더조은컴퓨터아카데미', '더조은아이티아카데미'],\n  '코리아IT아카데미': ['코리아IT', '코리아아이티', 'KIT', '코리아IT아카데미'],\n  '비트교육센터': ['비트', '비트캠프', '비트교육센터'],\n  '하이미디어': ['하이미디어', '하이미디어아카데미', '하이미디어컴퓨터학원'],\n  '아이티윌': ['아이티윌', 'IT WILL', '아이티윌부산교육센터'],\n  '메가스터디': ['메가스터디'],\n  '에이콘아카데미': ['에이콘', '에이콘아카데미', '에이콘아카데미(강남)'],\n  '한국ICT인재개발원': ['ICT'],\n  'MBC아카데미 컴퓨터 교육센터': ['MBC아카데미', '(MBC)'],\n  '쌍용아카데미': ['쌍용'],\n  'KH정보교육원': ['KH'],\n  '(주)솔데스크': ['솔데스크강남학원', '(주)솔데스크', '솔데스크']\n};\n\n// 훈련기관 그룹화 함수\nexport function groupInstitutionsAdvanced(course: CourseData): string {\n  if (!course.훈련기관) return '';\n  const cleanName = course.훈련기관\n    .replace(/[^가-힣A-Za-z0-9\\s()]/g, '')\n    .replace(/\\s+/g, ' ')\n    .trim()\n    .toUpperCase();\n  for (const [groupName, keywords] of Object.entries(institutionGroups)) {\n    for (const keyword of keywords) {\n      if (cleanName.includes(keyword.toUpperCase())) {\n        return groupName;\n      }\n    }\n  }\n  return course.훈련기관; // 매칭되는 그룹이 없으면 원래 기관명 반환\n}\n\nexport function aggregateCoursesByCourseIdWithLatestInfo(courses: CourseData[], year?: number, institutionName?: string) {\n  const groupMap = new Map<string, CourseData[]>();\n  courses.forEach(course => {\n    const key = typeof course['훈련과정 ID'] === 'string' ? course['훈련과정 ID'].trim() : '';\n    if (!key) return;\n    if (!groupMap.has(key)) groupMap.set(key, []);\n    groupMap.get(key)!.push(course);\n  });\n\n  const result: (AggregatedCourseData & { studentsStr?: string, openCountStr?: string })[] = [];\n  groupMap.forEach((group, courseId) => {\n    const latest = group.reduce((a, b) => new Date(a.과정시작일) > new Date(b.과정시작일) ? a : b);\n    \n    const totalRevenue = group.reduce((sum, c) => {\n      let revenue = 0;\n      if (year !== undefined) {\n        const yearKey = `조정_${year}년` as keyof CourseData;\n        revenue = (c[yearKey] as number | undefined) ?? 0;\n      } else {\n        revenue = c.조정_누적매출 ?? 0;\n      }\n      \n      let revenueShare = 1;\n      if (c.isLeadingCompanyCourse && c.leadingCompanyPartnerInstitution && institutionName) {\n        const originalInstitutionName = c.원본훈련기관 || c.훈련기관;\n        if (originalInstitutionName === c.leadingCompanyPartnerInstitution && institutionName === originalInstitutionName) {\n          revenueShare = 1.0;\n        } else {\n          const isTrainingInstitution = originalInstitutionName === institutionName;\n          const isPartnerInstitution = c.leadingCompanyPartnerInstitution === institutionName;\n          const isTrainingInstitutionInGroup = groupInstitutionsAdvanced({ ...c, 훈련기관: originalInstitutionName }) === institutionName;\n          const isPartnerInstitutionInGroup = groupInstitutionsAdvanced({ ...c, 훈련기관: c.leadingCompanyPartnerInstitution }) === institutionName;\n          if (isPartnerInstitution || isPartnerInstitutionInGroup) {\n            revenueShare = 0.9;\n          } else if (isTrainingInstitution || isTrainingInstitutionInGroup) {\n            revenueShare = 0.1;\n          } else {\n            revenueShare = 0;\n          }\n        }\n      }\n      \n      return sum + (revenue * revenueShare);\n    }, 0);\n    \n    const studentsInYear = year ? group.filter(c => new Date(c.과정시작일).getFullYear() === year).reduce((sum, c) => sum + (c['수강신청 인원'] || 0), 0) : group.reduce((sum, c) => sum + (c['수강신청 인원'] || 0), 0);\n    const studentsFromPrev = year ? group.filter(c => new Date(c.과정시작일).getFullYear() < year && new Date(c.과정종료일).getFullYear() === year).reduce((sum, c) => sum + (c['수강신청 인원'] || 0), 0) : 0;\n    const totalStudents = studentsInYear + studentsFromPrev;\n\n    const graduatesInYear = year ? group.filter(c => new Date(c.과정시작일).getFullYear() === year && new Date(c.과정종료일).getFullYear() === year).reduce((sum, c) => sum + (c.수료인원 || 0), 0) : group.reduce((sum, c) => sum + (c.수료인원 || 0), 0);\n    const graduatesFromPrev = year ? group.filter(c => new Date(c.과정시작일).getFullYear() < year && new Date(c.과정종료일).getFullYear() === year).reduce((sum, c) => sum + (c.수료인원 || 0), 0) : 0;\n    const totalGraduates = graduatesInYear + graduatesFromPrev;\n    \n    let studentsStr = studentsFromPrev > 0 ? `${studentsInYear}(${studentsFromPrev})` : `${studentsInYear}`;\n    let graduatesStr = graduatesFromPrev > 0 ? `${graduatesInYear}(${graduatesFromPrev})` : `${graduatesInYear}`; // Add graduatesStr\n    let openCountStr = `${group.length}`;\n\n    if (year) {\n      const openInYear = group.filter(c => new Date(c.과정시작일).getFullYear() === year).length;\n      const openFromPrev = group.filter(c => new Date(c.과정시작일).getFullYear() < year && new Date(c.과정종료일).getFullYear() === year).length;\n\n      if (openFromPrev > 0) {\n        openCountStr = `${openInYear}(${openFromPrev})`;\n      } else {\n        openCountStr = `${openInYear}`;\n      }\n    }\n    // ① 표시용 분자/분모(수료율에 실제 사용한 값)\n    let displayStudentsForCompletion = totalStudents;\n    let displayGraduatesForCompletion = totalGraduates;\n\n    let averageCompletionRate = 0;\n    if (year) {\n      const validCoursesForCompletion = group.filter(c => {\n        const courseEndYear = new Date(c.과정종료일).getFullYear();\n        return courseEndYear === year &&                         // 해당 연도 종료\n               (c.수료인원 ?? 0) > 0 &&\n               (c['수강신청 인원'] ?? 0) > 0;\n      });\n      if (validCoursesForCompletion.length > 0) {\n        const validStudents = validCoursesForCompletion.reduce((sum, c) => sum + (c['수강신청 인원'] || 0), 0);\n        const validGraduates = validCoursesForCompletion.reduce((sum, c) => sum + (c.수료인원 || 0), 0);\n        averageCompletionRate = validStudents > 0 ? (validGraduates / validStudents) * 100 : 0;\n        displayStudentsForCompletion = validStudents;\n        displayGraduatesForCompletion = validGraduates;\n      }\n    } else {\n      const validCourses = group.filter(c => (c.수료인원 ?? 0) > 0 && (c['수강신청 인원'] ?? 0) > 0);\n      if (validCourses.length > 0) {\n        const validStudents = validCourses.reduce((sum, c) => sum + (c['수강신청 인원'] || 0), 0);\n        const validGraduates = validCourses.reduce((sum, c) => sum + (c.수료인원 || 0), 0);\n        averageCompletionRate = validStudents > 0 ? (validGraduates / validStudents) * 100 : 0;\n        displayStudentsForCompletion = validStudents;\n        displayGraduatesForCompletion = validGraduates;\n      }\n    }\n    \n    result.push({\n      과정명: latest.과정명,\n      '훈련과정 ID': courseId,\n      총수강신청인원: displayStudentsForCompletion,\n      총수료인원: displayGraduatesForCompletion,\n      총누적매출: totalRevenue,\n      최소과정시작일: group.reduce((min, c) => new Date(c.과정시작일) < new Date(min) ? c.과정시작일 : min, group[0].과정시작일),\n      최대과정종료일: group.reduce((max, c) => new Date(c.과정종료일) > new Date(max) ? c.과정종료일 : max, group[0].과정종료일),\n      훈련유형들: [latest.훈련유형],\n      원천과정수: group.length,\n      총훈련생수: totalStudents,\n      평균만족도: latest.만족도,\n      평균수료율: averageCompletionRate,\n      studentsStr,\n      graduatesStr: graduatesFromPrev > 0 ? `${graduatesInYear}(${graduatesFromPrev})` : `${graduatesInYear}`, // Add graduatesStr\n      openCountStr,\n    });\n  });\n  return result.sort((a, b) => b.총누적매출 - a.총누적매출);\n}\n\nexport function preprocessData(data: any[]) {\n  return data.map(row => {\n    const newRow: any = {};\n    Object.keys(row).forEach(key => {\n      // 공백 제거\n      const newKey = key.replace(/\\s/g, '');\n      newRow[newKey] = row[key];\n    });\n    return newRow;\n  });\n}\n\nexport const calculateAdjustedRevenueForCourse = (\n  course: CourseData,\n  overallCompletionRate: number,\n  courseCompletionRate?: number, // 동일 훈련과정의 평균 수료율\n  institutionCompletionRate?: number, // 동일 훈련기관의 평균 수료율\n  isFirstTimeCourse?: boolean, // 초회차 여부\n  courseIdAvgCompletionRateMap?: Map<string, number> // <== 추가: 훈련과정ID별 평균 수료율 맵\n): number => {\n  // 1) 실 매출 대비, 매출 최대\n  const minRevenue = course['실 매출 대비'] ?? course.누적매출 ?? 0;\n  const maxRevenue = (typeof course['매출 최대'] === 'number' && !isNaN(course['매출 최대']) && course['매출 최대'] > 0)\n    ? course['매출 최대']\n    : minRevenue;\n\n  // 2) 매출이 없으면 보정 없이 반환\n  if (minRevenue === 0) {\n    return minRevenue;\n  }\n\n  // 3) 수강신청 인원이 0이면 보정 계산이 불가능하므로 그대로 반환\n  if ((course['수강신청 인원'] ?? 0) === 0) {\n    return minRevenue;\n  }\n\n  // 4) 실제 수료율 계산\n  let actualCompletionRate = (course['수료인원'] ?? 0) / (course['수강신청 인원'] ?? 1);\n  let usedCompletionRate = actualCompletionRate * 100;\n  let usedType = '실제';\n\n  // 수료인원이 0인 경우, 또는 초회차인 경우 예상 수료율 결정\n  if ((course['수료인원'] ?? 0) === 0 || isFirstTimeCourse) {\n    let estimatedCompletionRate = 0;\n    // 1순위: 훈련과정ID별 평균 수료율\n    if (courseIdAvgCompletionRateMap && course['훈련과정 ID'] && courseIdAvgCompletionRateMap.has(course['훈련과정 ID'])) {\n      estimatedCompletionRate = courseIdAvgCompletionRateMap.get(course['훈련과정 ID'])!;\n    } else if (courseCompletionRate !== undefined && courseCompletionRate > 0) {\n      estimatedCompletionRate = courseCompletionRate;\n    } else if (institutionCompletionRate !== undefined && institutionCompletionRate > 0) {\n      estimatedCompletionRate = institutionCompletionRate;\n    } else {\n      estimatedCompletionRate = overallCompletionRate;\n    }\n    actualCompletionRate = estimatedCompletionRate / 100; // %를 비율로 변환\n    usedCompletionRate = estimatedCompletionRate;\n    usedType = '예상';\n  }\n\n  // 5) 지수함수형 보정 적용 (y = min + (max-min)*(1 - a^(-b*rate)))\n  const a = 2;\n  const b = 2; // p값을 2로 고정\n  const rate = actualCompletionRate;\n  const expFactor = 1 - Math.pow(a, -b * rate);\n  const adjustedRevenue = minRevenue + (maxRevenue - minRevenue) * expFactor;\n\n  // 디버깅 로그 추가 - 모든 과정에 대해 출력\n\n  return adjustedRevenue;\n};\n\nexport const applyRevenueAdjustment = (\n  courses: CourseData[],\n  _overallCompletionRate: number // 기존 전체 평균은 무시\n): CourseData[] => {\n  \n  // 1. 전체 평균 수료율(0% 제외) 재계산\n  const validForOverall = courses.filter(c => (c['수료인원'] ?? 0) > 0 && (c['수강신청 인원'] ?? 0) > 0);\n  let overallCompletionRate = 0;\n  if (validForOverall.length > 0) {\n    const total = validForOverall.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n    const enroll = validForOverall.reduce((sum, c) => sum + (c['수강신청 인원'] ?? 0), 0);\n    overallCompletionRate = enroll > 0 ? (total / enroll) * 100 : 0;\n  }\n\n  // 2. 훈련과정ID별 평균 수료율 맵 생성 (0% 제외)\n  const courseIdAvgCompletionRateMap = new Map<string, number>();\n  const courseIdGroups = new Map<string, CourseData[]>();\n  courses.forEach(course => {\n    const courseId = course['훈련과정 ID'];\n    if (!courseId) return;\n    if (!courseIdGroups.has(courseId)) courseIdGroups.set(courseId, []);\n    courseIdGroups.get(courseId)!.push(course);\n  });\n  courseIdGroups.forEach((group, courseId) => {\n    const valid = group.filter(c => (c['수료인원'] ?? 0) > 0 && (c['수강신청 인원'] ?? 0) > 0);\n    if (valid.length > 0) {\n      const total = valid.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n      const enroll = valid.reduce((sum, c) => sum + (c['수강신청 인원'] ?? 0), 0);\n      const avg = enroll > 0 ? (total / enroll) * 100 : 0;\n      courseIdAvgCompletionRateMap.set(courseId, avg);\n    }\n  });\n\n  // 3. 기존 보정 로직 (2차 스케일링 포함, overallCompletionRate만 교체)\n  const yearColumns = ['2021년', '2022년', '2023년', '2024년', '2025년', '2026년'] as const;\n  const firstTimeCourses = new Set<string>();\n  const courseIdStartDateMap = new Map<string, Date>();\n  courses.forEach(course => {\n    if (course['훈련과정 ID']) {\n      const startDate = new Date(course.과정시작일);\n      if (!courseIdStartDateMap.has(course['훈련과정 ID']) || startDate < courseIdStartDateMap.get(course['훈련과정 ID'])!) {\n        courseIdStartDateMap.set(course['훈련과정 ID'], startDate);\n      }\n    }\n  });\n  courses.forEach(course => {\n    if (course['훈련과정 ID'] && courseIdStartDateMap.has(course['훈련과정 ID'])) {\n      if (new Date(course.과정시작일).getTime() === courseIdStartDateMap.get(course['훈련과정 ID'])!.getTime()) {\n        firstTimeCourses.add(course.고유값);\n      }\n    }\n  });\n  const intermediate = courses.map(course => {\n    const isFirstTime = firstTimeCourses.has(course.고유값);\n    const currentCourseCompletionRate = course['훈련과정 ID'] ? courseIdAvgCompletionRateMap.get(course['훈련과정 ID']) : undefined;\n    // 기존 institutionCompletionRates 등은 그대로 유지\n    // calculateAdjustedRevenueForCourse에 courseIdAvgCompletionRateMap 전달\n    const adjustedTotalRevenue = calculateAdjustedRevenueForCourse(\n      course,\n      overallCompletionRate,\n      currentCourseCompletionRate,\n      undefined,\n      isFirstTime,\n      courseIdAvgCompletionRateMap\n    );\n    const adjustedYearlyRevenues: { [key: string]: number | undefined } = {};\n    yearColumns.forEach(yearCol => {\n      const originalYearlyRevenue = course[yearCol] as number | undefined;\n      if (originalYearlyRevenue !== undefined) {\n        adjustedYearlyRevenues[`조정_${yearCol}`] = calculateAdjustedRevenueForCourse(\n          { ...course, 누적매출: originalYearlyRevenue, '실 매출 대비': originalYearlyRevenue },\n          overallCompletionRate,\n          currentCourseCompletionRate,\n          undefined,\n          isFirstTime,\n          courseIdAvgCompletionRateMap\n        );\n      }\n    });\n    return {\n      ...course,\n      조정_실매출대비: adjustedTotalRevenue,\n      조정_누적매출: adjustedTotalRevenue,\n      ...adjustedYearlyRevenues,\n    };\n  });\n  return intermediate;\n}\n\n// 그룹화된 기관의 개별 기관 정보를 추출하는 함수\nexport const getIndividualInstitutionsInGroup = (\n  allCourses: CourseData[],\n  groupName: string,\n  year?: number\n): InstitutionStat[] => {\n  // 그룹화 기준에 따라 row를 분리\n  const groupedCourses = allCourses.filter(course => groupInstitutionsAdvanced(course) === groupName);\n\n  // 실제 원본 기관명 목록 추출 (파트너기관 포함)\n  const individualInstitutions = [...new Set([\n    ...groupedCourses.map(c => c.원본훈련기관 || c.훈련기관),\n    ...groupedCourses.map(c => c.leadingCompanyPartnerInstitution).filter((name): name is string => Boolean(name))\n  ])];\n\n\n\n  const individualStats: InstitutionStat[] = [];\n  individualInstitutions.forEach(originalInstitutionName => {\n    // 그룹 내에서 해당 기관의 과정들만 필터링 (파트너기관으로 참여한 과정 포함)\n    const institutionCourses = groupedCourses.filter(course => {\n      const courseInstitution = course.원본훈련기관 || course.훈련기관;\n      const coursePartner = course.leadingCompanyPartnerInstitution;\n      return courseInstitution === originalInstitutionName || coursePartner === originalInstitutionName;\n    });\n    \n\n    \n    if (institutionCourses.length === 0) return;\n    \n    // 상세보기와 동일한 매출 계산 로직 적용\n    // 선도기업 과정의 매출 분배를 위해 개별 기관명 기준으로 계산\n    const aggregated = aggregateCoursesByCourseIdWithLatestInfo(institutionCourses, year, originalInstitutionName);\n    const totalRevenue = aggregated.reduce((sum, course) => sum + course.총누적매출, 0);\n    \n\n    \n    // 학생수/수료인원/과정수 계산 (파트너기관이 대체한 경우 파트너기관이 100% 담당)\n    let totalStudents = 0;\n    let completedStudents = 0;\n    let totalCourses = 0;\n    \n    institutionCourses.forEach(course => {\n      const courseInstitution = course.원본훈련기관 || course.훈련기관;\n      const coursePartner = course.leadingCompanyPartnerInstitution;\n      const isTrainingInstitution = courseInstitution === originalInstitutionName;\n      const isPartnerInstitution = coursePartner === originalInstitutionName;\n      \n      if (course.isLeadingCompanyCourse && course.leadingCompanyPartnerInstitution) {\n        // 선도기업 과정: 파트너기관이 100% 담당\n        if (isPartnerInstitution) {\n          totalStudents += course['수강신청 인원'] ?? 0;\n          completedStudents += course['수료인원'] ?? 0;\n          totalCourses += 1;\n        }\n        // 훈련기관은 학생수/수료인원/과정수 0\n      } else {\n        // 일반 과정: 훈련기관이 100% 담당\n        if (isTrainingInstitution) {\n          totalStudents += course['수강신청 인원'] ?? 0;\n          completedStudents += course['수료인원'] ?? 0;\n          totalCourses += 1;\n        }\n      }\n    });\n    \n    // 수료율 계산 (파트너기관이 대체한 경우 파트너기관 기준으로 계산)\n    let totalValidStudents = 0;\n    let totalValidGraduates = 0;\n    \n    institutionCourses.forEach(course => {\n      const courseInstitution = course.원본훈련기관 || course.훈련기관;\n      const coursePartner = course.leadingCompanyPartnerInstitution;\n      const isTrainingInstitution = courseInstitution === originalInstitutionName;\n      const isPartnerInstitution = coursePartner === originalInstitutionName;\n      \n      if (course['수료인원'] > 0 && course['수강신청 인원'] > 0) {\n        if (course.isLeadingCompanyCourse && course.leadingCompanyPartnerInstitution) {\n          // 선도기업 과정: 파트너기관만 계산\n          if (isPartnerInstitution) {\n            totalValidStudents += course['수강신청 인원'] ?? 0;\n            totalValidGraduates += course['수료인원'] ?? 0;\n          }\n        } else {\n          // 일반 과정: 훈련기관만 계산\n          if (isTrainingInstitution) {\n            totalValidStudents += course['수강신청 인원'] ?? 0;\n            totalValidGraduates += course['수료인원'] ?? 0;\n          }\n        }\n      }\n    });\n    \n    const completionRate = totalValidStudents > 0 ? (totalValidGraduates / totalValidStudents) * 100 : 0;\n    \n    // 평균 만족도 계산 (파트너기관이 대체한 경우 파트너기관 기준으로 계산)\n    let totalWeighted = 0;\n    let totalWeight = 0;\n    \n    institutionCourses.forEach(course => {\n      const courseInstitution = course.원본훈련기관 || course.훈련기관;\n      const coursePartner = course.leadingCompanyPartnerInstitution;\n      const isTrainingInstitution = courseInstitution === originalInstitutionName;\n      const isPartnerInstitution = coursePartner === originalInstitutionName;\n      \n      if (course.만족도 && course.만족도 > 0 && course['수료인원'] > 0) {\n        if (course.isLeadingCompanyCourse && course.leadingCompanyPartnerInstitution) {\n          // 선도기업 과정: 파트너기관만 계산\n          if (isPartnerInstitution) {\n            totalWeighted += (course.만족도 ?? 0) * (course['수료인원'] ?? 0);\n            totalWeight += course['수료인원'] ?? 0;\n          }\n        } else {\n          // 일반 과정: 훈련기관만 계산\n          if (isTrainingInstitution) {\n            totalWeighted += (course.만족도 ?? 0) * (course['수료인원'] ?? 0);\n            totalWeight += course['수료인원'] ?? 0;\n          }\n        }\n      }\n    });\n    \n    const avgSatisfaction = totalWeight > 0 ? totalWeighted / totalWeight : 0;\n    \n    // 이전 연도 시작 과정 정보 계산 (파트너기관이 대체한 경우 파트너기관 기준으로 계산)\n    let prevYearStudents = 0;\n    let prevYearCompletedStudents = 0;\n    if (year !== undefined) {\n      institutionCourses.forEach(course => {\n        const courseInstitution = course.원본훈련기관 || course.훈련기관;\n        const coursePartner = course.leadingCompanyPartnerInstitution;\n        const isTrainingInstitution = courseInstitution === originalInstitutionName;\n        const isPartnerInstitution = coursePartner === originalInstitutionName;\n        \n        const isPrevYearCourse = new Date(course.과정시작일).getFullYear() < year &&\n                                new Date(course.과정종료일).getFullYear() === year;\n        \n        if (isPrevYearCourse) {\n          if (course.isLeadingCompanyCourse && course.leadingCompanyPartnerInstitution) {\n            // 선도기업 과정: 파트너기관만 계산\n            if (isPartnerInstitution) {\n              prevYearStudents += course['수강신청 인원'] ?? 0;\n              prevYearCompletedStudents += course['수료인원'] ?? 0;\n            }\n            // 훈련기관은 0\n          } else {\n            // 일반 과정: 훈련기관만 계산\n            if (isTrainingInstitution) {\n              prevYearStudents += course['수강신청 인원'] ?? 0;\n              prevYearCompletedStudents += course['수료인원'] ?? 0;\n            }\n          }\n        }\n      });\n    }\n    \n\n    \n    individualStats.push({\n      institutionName: originalInstitutionName,\n      totalRevenue: totalRevenue ?? 0,\n      totalCourses: typeof totalCourses === 'number' && !isNaN(totalCourses) ? totalCourses : 0,\n      totalStudents: typeof totalStudents === 'number' && !isNaN(totalStudents) ? totalStudents : 0,\n      completedStudents: typeof completedStudents === 'number' && !isNaN(completedStudents) ? completedStudents : 0,\n      completionRate: typeof completionRate === 'number' && !isNaN(completionRate) ? completionRate : 0,\n      avgSatisfaction: typeof avgSatisfaction === 'number' && !isNaN(avgSatisfaction) ? avgSatisfaction : 0,\n      courses: institutionCourses,\n      prevYearStudents: typeof prevYearStudents === 'number' && !isNaN(prevYearStudents) ? prevYearStudents : 0,\n      prevYearCompletedStudents: typeof prevYearCompletedStudents === 'number' && !isNaN(prevYearCompletedStudents) ? prevYearCompletedStudents : 0\n    });\n  });\n  // 매출액 기준 내림차순 정렬\n  return individualStats.sort((a, b) => b.totalRevenue - a.totalRevenue);\n};\n\n// 기관별 상세 매출 계산을 위한 통합 함수 (훈련기관/파트너기관 역할 모두 포함)\nexport const calculateInstitutionDetailedRevenue = (\n  allCourses: CourseData[],\n  institutionName: string,\n  year?: number\n): {\n  totalRevenue: number;\n  totalCourses: number;\n  totalStudents: number;\n  completedStudents: number;\n  courses: CourseData[];\n} => {\n  let totalRevenue = 0;\n  let totalCourses = 0;\n  let totalStudents = 0;\n  let completedStudents = 0;\n  const courses: CourseData[] = [];\n\n  allCourses.forEach(course => {\n    const courseInstitution = course.원본훈련기관 || course.훈련기관;\n    const coursePartner = course.leadingCompanyPartnerInstitution;\n    \n    // 그룹명(프랜차이즈) 기준으로도 포함되도록 보완\n    const isInstitutionInGroup = groupInstitutionsAdvanced({ ...course, 훈련기관: courseInstitution }) === institutionName;\n    const isPartnerInGroup = coursePartner && groupInstitutionsAdvanced({ ...course, 훈련기관: coursePartner }) === institutionName;\n\n    // 해당 그룹(기관)이 훈련기관이거나 파트너기관으로 참여한 과정인지 확인\n    const isTrainingInstitution = isInstitutionInGroup;\n    const isPartnerInstitution = isPartnerInGroup;\n\n    if (!isTrainingInstitution && !isPartnerInstitution) return;\n\n    // 연도 필터링: 선택된 연도에 시작했거나, 이전에 시작해서 선택된 연도에 끝나는 과정만 포함\n    if (year !== undefined) {\n      const startYear = new Date(course.과정시작일).getFullYear();\n      const endYear = new Date(course.과정종료일).getFullYear();\n      if (!(startYear === year || (startYear < year && endYear === year))) {\n        return;\n      }\n    }\n\n    // 매출 계산\n    let revenue = 0;\n    if (year !== undefined) {\n      const yearKey = `조정_${year}년` as keyof CourseData;\n      revenue = (course[yearKey] as number | undefined) ?? 0;\n    } else {\n      revenue = course.조정_누적매출 ?? 0;\n    }\n\n    // 선도기업 훈련인 경우 매출 분배 적용\n    if (course.isLeadingCompanyCourse && course.leadingCompanyPartnerInstitution) {\n      if (courseInstitution === course.leadingCompanyPartnerInstitution && isTrainingInstitution && isPartnerInstitution) {\n        // 동일 기관: 100% 집계\n        // 아무런 분배 없이 그대로 둠 (revenue = revenue * 1)\n      } else if (isPartnerInstitution) {\n        // 파트너기관: 90%\n        revenue = revenue * 0.9;\n      } else if (isTrainingInstitution) {\n        // 훈련기관: 10%\n        revenue = revenue * 0.1;\n      }\n    }\n\n    // 학생 수 계산 (선도기업 훈련에서는 파트너기관이 100% 담당)\n    let studentCount = course['수강신청 인원'] ?? 0;\n    let completedCount = course.수료인원 ?? 0;\n    if (course.isLeadingCompanyCourse && course.leadingCompanyPartnerInstitution) {\n      if (courseInstitution === course.leadingCompanyPartnerInstitution && isTrainingInstitution && isPartnerInstitution) {\n        // 동일 기관: 100% 집계 (변경 없음)\n      } else if (isTrainingInstitution) {\n        // 훈련기관은 학생 수 0\n        studentCount = 0;\n        completedCount = 0;\n      }\n      // 파트너기관은 학생 수 100% (기본값)\n    }\n\n    totalRevenue += revenue;\n    totalStudents += studentCount;\n    completedStudents += completedCount;\n    courses.push(course);\n  });\n\n  totalCourses = courses.length;\n\n  return {\n    totalRevenue,\n    totalCourses,\n    totalStudents,\n    completedStudents,\n    courses\n  };\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1684, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/User/Documents/GitHub/KDT_Dataset/kdt-dashboard-renewal/src/utils/formatters.ts"],"sourcesContent":["// 숫자 포맷팅 함수\r\nexport const formatNumber = (value: number | undefined | null): string => {\r\n  if (value === undefined || value === null) return '0';\r\n  return new Intl.NumberFormat('ko-KR', {\r\n    maximumFractionDigits: 0\r\n  }).format(value);\r\n};\r\n\r\n// 통화 포맷팅 함수 (조·억·천만원·백만원 단위 한국형 표기)\r\nexport const formatCurrency = (value: number | undefined | null): string => {\r\n  if (value === undefined || value === null || isNaN(value)) return '0억';\r\n\r\n  const num = Math.abs(value);\r\n  const sign = value < 0 ? '-' : '';\r\n  const TRILLION = 1_000_000_000_000; // 1조\r\n  const EOK = 100_000_000; // 1억\r\n\r\n  // 소수점 1자리(불필요하면 제거)\r\n  const oneDecimal = (v: number) => {\r\n    const str = v.toFixed(1);\r\n    return str.endsWith('.0') ? str.slice(0, -2) : str;\r\n  };\r\n\r\n  if (num >= TRILLION) {\r\n    const tril = Math.floor(num / TRILLION);            // 조 단위\r\n    const remainEok = Math.floor((num % TRILLION) / EOK); // 억 단위 정수\r\n    if (remainEok > 0) {\r\n      return `${sign}${tril}조 ${remainEok}억`;\r\n    }\r\n    return `${sign}${tril}조`;\r\n  }\r\n\r\n  // 1억 미만도 모두 억 단위로 표기\r\n  const eokVal = num / EOK;\r\n  return `${sign}${oneDecimal(eokVal)}억`;\r\n};\r\n\r\n// 억 단위 숫자 포맷 (차트용)\r\nexport const formatEok = (eokValue: number): string => {\r\n  return `${formatNumber(eokValue)}억`;\r\n};\r\n\r\n// 매출액을 억 단위로 변환하는 함수\r\nexport const formatRevenue = (value: number | undefined | null): string => {\r\n  if (value === undefined || value === null || isNaN(value)) return '0억';\r\n  return `${(value / 100000000).toFixed(1)}억`;\r\n};"],"names":[],"mappings":"AAAA,YAAY;;;;;;;AACL,MAAM,eAAe,CAAC;IAC3B,IAAI,UAAU,aAAa,UAAU,MAAM,OAAO;IAClD,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;QACpC,uBAAuB;IACzB,GAAG,MAAM,CAAC;AACZ;AAGO,MAAM,iBAAiB,CAAC;IAC7B,IAAI,UAAU,aAAa,UAAU,QAAQ,MAAM,QAAQ,OAAO;IAElE,MAAM,MAAM,KAAK,GAAG,CAAC;IACrB,MAAM,OAAO,QAAQ,IAAI,MAAM;IAC/B,MAAM,WAAW,mBAAmB,KAAK;IACzC,MAAM,MAAM,aAAa,KAAK;IAE9B,oBAAoB;IACpB,MAAM,aAAa,CAAC;QAClB,MAAM,MAAM,EAAE,OAAO,CAAC;QACtB,OAAO,IAAI,QAAQ,CAAC,QAAQ,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK;IACjD;IAEA,IAAI,OAAO,UAAU;QACnB,MAAM,OAAO,KAAK,KAAK,CAAC,MAAM,WAAsB,OAAO;QAC3D,MAAM,YAAY,KAAK,KAAK,CAAC,AAAC,MAAM,WAAY,MAAM,UAAU;QAChE,IAAI,YAAY,GAAG;YACjB,OAAO,GAAG,OAAO,KAAK,EAAE,EAAE,UAAU,CAAC,CAAC;QACxC;QACA,OAAO,GAAG,OAAO,KAAK,CAAC,CAAC;IAC1B;IAEA,qBAAqB;IACrB,MAAM,SAAS,MAAM;IACrB,OAAO,GAAG,OAAO,WAAW,QAAQ,CAAC,CAAC;AACxC;AAGO,MAAM,YAAY,CAAC;IACxB,OAAO,GAAG,aAAa,UAAU,CAAC,CAAC;AACrC;AAGO,MAAM,gBAAgB,CAAC;IAC5B,IAAI,UAAU,aAAa,UAAU,QAAQ,MAAM,QAAQ,OAAO;IAClE,OAAO,GAAG,CAAC,QAAQ,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAC7C","debugId":null}},
    {"offset": {"line": 1733, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/User/Documents/GitHub/KDT_Dataset/kdt-dashboard-renewal/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n\r\nexport const formatCurrency = (value: number): string => {\r\n  return new Intl.NumberFormat('ko-KR', {\r\n    style: 'currency',\r\n    currency: 'KRW',\r\n    maximumFractionDigits: 0\r\n  }).format(value);\r\n};\r\n\r\nexport const formatNumber = (value: number): string => {\r\n  return new Intl.NumberFormat('ko-KR').format(value);\r\n};"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;QACpC,OAAO;QACP,UAAU;QACV,uBAAuB;IACzB,GAAG,MAAM,CAAC;AACZ;AAEO,MAAM,eAAe,CAAC;IAC3B,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS,MAAM,CAAC;AAC/C","debugId":null}},
    {"offset": {"line": 1761, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/User/Documents/GitHub/KDT_Dataset/kdt-dashboard-renewal/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\r\nimport { Check, ChevronDown } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Select = SelectPrimitive.Root\r\n\r\nconst SelectGroup = SelectPrimitive.Group\r\n\r\nconst SelectValue = SelectPrimitive.Value\r\n\r\nconst SelectTrigger = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <SelectPrimitive.Icon asChild>\r\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\r\n    </SelectPrimitive.Icon>\r\n  </SelectPrimitive.Trigger>\r\n))\r\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\r\n\r\nconst SelectContent = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\r\n>(({ className, children, position = \"popper\", ...props }, ref) => (\r\n  <SelectPrimitive.Portal>\r\n    <SelectPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n        position === \"popper\" &&\r\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\r\n        className\r\n      )}\r\n      position={position}\r\n      {...props}\r\n    >\r\n      <SelectPrimitive.Viewport\r\n        className={cn(\r\n          \"p-1\",\r\n          position === \"popper\" &&\r\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\r\n        )}\r\n      >\r\n        {children}\r\n      </SelectPrimitive.Viewport>\r\n    </SelectPrimitive.Content>\r\n  </SelectPrimitive.Portal>\r\n))\r\nSelectContent.displayName = SelectPrimitive.Content.displayName\r\n\r\nconst SelectItem = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\r\n>(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\r\n      <SelectPrimitive.ItemIndicator>\r\n        <Check className=\"h-4 w-4\" />\r\n      </SelectPrimitive.ItemIndicator>\r\n    </span>\r\n\r\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\r\n  </SelectPrimitive.Item>\r\n))\r\nSelectItem.displayName = SelectPrimitive.Item.displayName\r\n\r\nexport {\r\n  Select,\r\n  SelectGroup,\r\n  SelectValue,\r\n  SelectTrigger,\r\n  SelectContent,\r\n  SelectItem,\r\n} "],"names":[],"mappings":";;;;;;;;;AAEA;AACA;AACA;AAAA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,6RACA;QAED,GAAG,KAAK;;YAER;0BACD,8OAAC,kKAAA,CAAA,OAAoB;gBAAC,OAAO;0BAC3B,cAAA,8OAAC,oNAAA,CAAA,cAAW;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAI7B,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACzD,8OAAC,kKAAA,CAAA,SAAsB;kBACrB,cAAA,8OAAC,kKAAA,CAAA,UAAuB;YACtB,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,8bACA,aAAa,YACX,mIACF;YAEF,UAAU;YACT,GAAG,KAAK;sBAET,cAAA,8OAAC,kKAAA,CAAA,WAAwB;gBACvB,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,OACA,aAAa,YACX;0BAGH;;;;;;;;;;;;;;;;AAKT,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,kKAAA,CAAA,OAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,6NACA;QAED,GAAG,KAAK;;0BAET,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC,kKAAA,CAAA,gBAA6B;8BAC5B,cAAA,8OAAC,oMAAA,CAAA,QAAK;wBAAC,WAAU;;;;;;;;;;;;;;;;0BAIrB,8OAAC,kKAAA,CAAA,WAAwB;0BAAE;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,kKAAA,CAAA,OAAoB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1882, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/User/Documents/GitHub/KDT_Dataset/kdt-dashboard-renewal/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\r\nimport { X } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Dialog = DialogPrimitive.Root\r\n\r\nconst DialogTrigger = DialogPrimitive.Trigger\r\n\r\nconst DialogPortal = DialogPrimitive.Portal\r\n\r\nconst DialogClose = DialogPrimitive.Close\r\n\r\nconst DialogOverlay = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Overlay\r\n    ref={ref}\r\n    className={cn(\r\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\r\n\r\nconst DialogContent = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\r\n>(({ className, children, ...props }, ref) => (\r\n  <DialogPortal>\r\n    <DialogOverlay />\r\n    <DialogPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\r\n        <X className=\"h-4 w-4\" />\r\n        <span className=\"sr-only\">Close</span>\r\n      </DialogPrimitive.Close>\r\n    </DialogPrimitive.Content>\r\n  </DialogPortal>\r\n))\r\nDialogContent.displayName = DialogPrimitive.Content.displayName\r\n\r\nconst DialogHeader = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n)\r\nDialogHeader.displayName = \"DialogHeader\"\r\n\r\nconst DialogFooter = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n)\r\nDialogFooter.displayName = \"DialogFooter\"\r\n\r\nconst DialogTitle = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Title\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-lg font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDialogTitle.displayName = DialogPrimitive.Title.displayName\r\n\r\nconst DialogDescription = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Description\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nDialogDescription.displayName = DialogPrimitive.Description.displayName\r\n\r\nexport {\r\n  Dialog,\r\n  DialogPortal,\r\n  DialogOverlay,\r\n  DialogClose,\r\n  DialogTrigger,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogFooter,\r\n  DialogTitle,\r\n  DialogDescription,\r\n} "],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,kKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,kKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,kKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,kKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,kKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 2014, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/User/Documents/GitHub/KDT_Dataset/kdt-dashboard-renewal/src/app/institution-analysis/InstitutionAnalysisClient.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState, useMemo } from 'react';\nimport { CourseData, InstitutionStat, AggregatedCourseData, calculateInstitutionStats, aggregateCoursesByCourseIdWithLatestInfo, getIndividualInstitutionsInGroup, calculateInstitutionDetailedRevenue } from \"@/lib/data-utils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { formatCurrency, formatNumber, formatRevenue } from \"@/utils/formatters\";\nimport {\n  LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface GetInstitutionYearlyStatsResult {\n  studentStr: string;\n  graduateStr: string;\n  openCountStr: string;\n  operatedCourseCount: number;\n  openedCourseCount: number;\n  completionRate: string;\n  avgSatisfaction: number;\n  x: number;\n  y: number;\n  xg: number;\n  yg: number;\n  xc: number;\n  yc: number;\n}\nexport interface AggregatedCourseDataWithOpenCount extends AggregatedCourseData {\n  openedInYearCount?: number;\n}\n\ninterface InstitutionAnalysisClientProps {\n  initialInstitutionStats: InstitutionStat[];\n  availableYears: number[];\n  originalData: CourseData[];\n}\n\n// 공통 집계 함수: 기관명, 연도, 원본 row를 받아 x, y, x(y) 표기, 수료율, 과정수 등 반환\nfunction getInstitutionYearlyStats({\n  rows,\n  institutionName,\n  year,\n  month // 월 파라미터 추가\n}: {\n  rows: CourseData[];\n  institutionName: string;\n  year: number | undefined;\n  month: number | 'all'; // 월 타입 추가\n}): GetInstitutionYearlyStatsResult {\n  const filtered = rows.filter(c => {\n    const isLeadingWithPartner = c.isLeadingCompanyCourse && c.leadingCompanyPartnerInstitution;\n    if (\n      isLeadingWithPartner &&\n      c.훈련기관 === institutionName &&\n      c.훈련기관 !== c.leadingCompanyPartnerInstitution\n    ) return false;\n    return c.훈련기관 === institutionName || c.파트너기관 === institutionName;\n  });\n\n  let finalFilteredRows = filtered;\n\n  // 연도와 월이 모두 선택된 경우 해당 연도/월에 시작된 과정만 필터링\n  if (year !== undefined && month !== 'all') {\n    finalFilteredRows = filtered.filter(c => {\n      const startDate = new Date(c.과정시작일);\n      return startDate.getFullYear() === year && (startDate.getMonth() + 1) === month;\n    });\n  } else if (year !== undefined) {\n    // 연도만 선택된 경우 해당 연도에 시작된 과정과 이전 연도에 시작하여 해당 연도에 종료된 과정 포함\n    finalFilteredRows = filtered.filter(c => {\n      const startDate = new Date(c.과정시작일);\n      const endDate = new Date(c.과정종료일);\n      return startDate.getFullYear() === year || (startDate.getFullYear() < year && endDate.getFullYear() === year);\n    });\n\n    // === 수료율 계산 방식 변경 ===\n    // 1. 해당 연도에 종료된 과정만 필터링\n    const endedThisYear = filtered.filter(c => new Date(c.과정종료일).getFullYear() === year);\n    // 1-1. 수료인원이 1명 이상인 과정만 필터링\n    const endedThisYearWithGraduates = endedThisYear.filter(c => (c['수료인원'] ?? 0) > 0);\n    // 2. 분모: 해당 연도에 종료된 과정(수료인원 1명 이상)의 입과생\n    const entryForEndedThisYear = endedThisYearWithGraduates.reduce((sum, c) => sum + (c['수강신청 인원'] ?? 0), 0);\n    // 3. 분자: 해당 연도에 종료된 과정(수료인원 1명 이상)의 수료인원\n    const graduatedThisYear = endedThisYearWithGraduates.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n    // 4. 수료율\n    const completionRate = entryForEndedThisYear > 0 ? (graduatedThisYear / entryForEndedThisYear) * 100 : 0;\n    const completionRateStr = `${completionRate.toFixed(1)}% (${graduatedThisYear}/${entryForEndedThisYear})`;\n\n    // 훈련생 수 표기: 올해 입과생 + (작년 입과, 올해 종료 과정의 입과생)\n    const startedThisYear = filtered.filter(c => new Date(c.과정시작일).getFullYear() === year);\n    const entryThisYear = startedThisYear.reduce((sum, c) => sum + (c['수강신청 인원'] ?? 0), 0);\n    const prevYearEntryEndedThisYear = endedThisYear\n      .filter(c => new Date(c.과정시작일).getFullYear() < year)\n      .reduce((sum, c) => sum + (c['수강신청 인원'] ?? 0), 0);\n    const entryStr = prevYearEntryEndedThisYear > 0\n      ? `${formatNumber(entryThisYear)}(${formatNumber(prevYearEntryEndedThisYear)})`\n      : `${formatNumber(entryThisYear)}`;\n\n    // 수료인원 표기: 올해 시작, 올해 종료 과정의 수료인원 + (작년 입과, 올해 종료 과정의 수료인원)\n    const gradThisYear = startedThisYear.filter(c => new Date(c.과정종료일).getFullYear() === year).reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n    const gradPrevYearEndedThisYear = endedThisYear\n      .filter(c => new Date(c.과정시작일).getFullYear() < year)\n      .reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n    const gradStr = gradPrevYearEndedThisYear > 0\n      ? `${formatNumber(gradThisYear)}(${formatNumber(gradPrevYearEndedThisYear)})`\n      : `${formatNumber(gradThisYear)}`;\n\n    // 개강 회차수 표기: 올해 시작 + (작년 시작, 올해 종료)\n    const openStartSum = startedThisYear.length;\n    const openEndSum = endedThisYear.filter(c => new Date(c.과정시작일).getFullYear() < year).length;\n    const openCountStr = openEndSum > 0\n      ? `${openStartSum}(${openEndSum})`\n      : `${openStartSum}`;\n\n    // 운영중인 과정 수: 해당 연도에 운영된 고유한 과정명 수\n    const uniqueCourseNamesForYear = new Set([...startedThisYear, ...endedThisYear].map(c => c.과정명));\n    const operatedCourseCount = uniqueCourseNamesForYear.size;\n    const openedCourseCount = openStartSum + openEndSum;\n\n    // 평균 만족도 계산 (올해 종료 과정 기준)\n    const validSatisfaction = endedThisYear.filter(c => c.만족도 && c.만족도 > 0);\n    const totalWeighted = validSatisfaction.reduce((sum, c) => sum + (c.만족도 ?? 0) * (c['수료인원'] ?? 0), 0);\n    const totalWeight = validSatisfaction.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n    const avgSatisfaction = totalWeight > 0 ? totalWeighted / totalWeight : 0;\n\n    return {\n      studentStr: entryStr,\n      graduateStr: gradStr,\n      openCountStr: openCountStr,\n      operatedCourseCount,\n      openedCourseCount: openedCourseCount,\n      avgSatisfaction: parseFloat(avgSatisfaction.toFixed(1)),\n      completionRate: completionRateStr,\n      \n      x: entryThisYear,\n      y: prevYearEntryEndedThisYear,\n      xg: gradThisYear,\n      yg: gradPrevYearEndedThisYear,\n      xc: openStartSum,\n      yc: openEndSum\n    };\n  }\n\n  // 전체 연도 + 전체 월일 때는 전체 합계만 표기 (x(y) 표기 대신)\n  if (year === undefined && month === 'all') {\n    const totalStudents = finalFilteredRows.reduce((sum, c) => sum + (c['수강신청 인원'] ?? 0), 0);\n    const totalGraduates = finalFilteredRows.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n    const totalCourses = finalFilteredRows.length;\n    const uniqueCourseNames = new Set(finalFilteredRows.map(c => c.과정명));\n    const validRows = finalFilteredRows.filter(c => (c['수강신청 인원'] ?? 0) > 0 && (c['수료인원'] ?? 0) > 0);\n    const validStudents = validRows.reduce((sum, c) => sum + (c['수강신청 인원'] ?? 0), 0);\n    const validGraduates = validRows.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n    const completionRate = validStudents > 0 ? (validGraduates / validStudents) * 100 : 0;\n    // 평균 만족도 계산\n    const validSatisfaction = validRows.filter(c => c.만족도 && c.만족도 > 0);\n    const totalWeighted = validSatisfaction.reduce((sum, c) => sum + (c.만족도 ?? 0) * (c['수료인원'] ?? 0), 0);\n    const totalWeight = validSatisfaction.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n    const avgSatisfaction = totalWeight > 0 ? totalWeighted / totalWeight : 0;\n    return {\n      studentStr: formatNumber(totalStudents),\n      graduateStr: formatNumber(totalGraduates),\n      openCountStr: formatNumber(totalCourses),\n      operatedCourseCount: uniqueCourseNames.size,\n      openedCourseCount: totalCourses,\n      completionRate: completionRate === 0 ? '-' : `${completionRate.toFixed(1)}%`,\n      avgSatisfaction: 0,\n      \n      \n      \n      \n      \n      x: totalStudents,\n      y: 0,\n      xg: totalGraduates,\n      yg: 0,\n      xc: totalCourses,\n  \n      yc: 0\n    };\n  }\n\n  const totalStudents = finalFilteredRows.reduce((sum, c) => sum + (c['수강신청 인원'] ?? 0), 0);\n  const totalGraduates = finalFilteredRows.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n  const totalCourses = finalFilteredRows.length;\n  const uniqueCourseNames = new Set(finalFilteredRows.map(c => c.과정명));\n  const validRows = finalFilteredRows.filter(c => (c['수강신청 인원'] ?? 0) > 0 && (c['수료인원'] ?? 0) > 0);\n  const validStudents = validRows.reduce((sum, c) => sum + (c['수강신청 인원'] ?? 0), 0);\n  const validGraduates = validRows.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n  const completionRate = validStudents > 0 ? (validGraduates / validStudents) * 100 : 0;\n\n  // x(y) 표기법을 따르지 않는 경우 (연도+월 선택 시)\n  if (year !== undefined && month !== 'all') {\n    return {\n      studentStr: `${formatNumber(totalStudents)}`,\n      graduateStr: `${formatNumber(totalGraduates)}`,\n      openCountStr: `${totalCourses}`,\n      operatedCourseCount: uniqueCourseNames.size,\n      openedCourseCount: totalCourses,\n      completionRate: completionRate === 0 ? '-' : `${completionRate.toFixed(1)}%`,\n      avgSatisfaction: 0,\n      \n      \n      \n      \n      x: totalStudents,\n      y: 0,\n      xg: totalGraduates,\n      yg: 0,\n      xc: totalCourses,\n      yc: 0\n    };\n  }\n\n  // 기존 x(y) 표기법 로직 (연도만 선택되거나 전체 기간일 때)\n  const startRows = filtered.filter(c => new Date(c.과정시작일).getFullYear() === year);\n  const endRows = filtered.filter(c => new Date(c.과정시작일).getFullYear() !== year && new Date(c.과정종료일).getFullYear() === year);\n  const startSum = startRows.reduce((sum, c) => sum + (c['수강신청 인원'] ?? 0), 0);\n  const endSum = endRows.reduce((sum, c) => sum + (c['수강신청 인원'] ?? 0), 0);\n  const gradStartSum = startRows.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n  const gradEndSum = endRows.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n  const openStartSum = startRows.length;\n  const openEndSum = endRows.length;\n\n  const studentStr = startSum > 0 && endSum > 0 ? `${formatNumber(startSum)}(${formatNumber(endSum)})` : startSum > 0 ? `${formatNumber(startSum)}` : endSum > 0 ? `(${formatNumber(endSum)})` : '';\n  const graduateStr = gradStartSum > 0 && gradEndSum > 0 ? `${formatNumber(gradStartSum)}(${formatNumber(gradEndSum)})` : gradStartSum > 0 ? `${formatNumber(gradStartSum)}` : gradEndSum > 0 ? `(${formatNumber(gradEndSum)})` : '';\n  const openCountStr = openStartSum > 0 && openEndSum > 0 ? `${openStartSum}(${openEndSum})` : openStartSum > 0 ? `${openStartSum}` : openEndSum > 0 ? `(${openEndSum})` : '';\n\n  // 운영중인 과정 수: 해당 연도에 운영된 고유한 과정명 수\n  const uniqueCourseNamesForYear = new Set([...startRows, ...endRows].map(c => c.과정명));\n  const operatedCourseCount = uniqueCourseNamesForYear.size;\n  const openedCourseCount = openStartSum + openEndSum; // 개강 과정 수: 올해 개강 + 작년 개강/올해 종료 (회차 수)\n  const validRowsForCompletion = [...startRows, ...endRows].filter(c => (c['수강신청 인원'] ?? 0) > 0 && (c['수료인원'] ?? 0) > 0);\n  const validStudentsForCompletion = validRowsForCompletion.reduce((sum, c) => sum + (c['수강신청 인원'] ?? 0), 0);\n  const validGraduatesForCompletion = validRowsForCompletion.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n  const completionRateForYear = validStudentsForCompletion > 0 ? (validGraduatesForCompletion / validStudentsForCompletion) * 100 : 0;\n\n  // 평균 만족도 계산\n  const validSatisfaction = [...startRows, ...endRows].filter(c => c.만족도 && c.만족도 > 0);\n  const totalWeighted = validSatisfaction.reduce((sum, c) => sum + (c.만족도 ?? 0) * (c['수료인원'] ?? 0), 0);\n  const totalWeight = validSatisfaction.reduce((sum, c) => sum + (c['수료인원'] ?? 0), 0);\n  const avgSatisfaction = totalWeight > 0 ? totalWeighted / totalWeight : 0;\n\n  return {\n    studentStr,\n    graduateStr,\n    openCountStr, // x<br/>(y) 표기\n    operatedCourseCount, // 운영 과정 수\n    openedCourseCount: openedCourseCount,\n      avgSatisfaction: parseFloat(avgSatisfaction.toFixed(1)),\n    completionRate: completionRateForYear === 0 ? '-' : `${completionRateForYear.toFixed(1)}%`,\n    \n    x: startSum,\n    y: endSum,\n    xg: gradStartSum,\n    yg: gradEndSum,\n    xc: openStartSum,\n    yc: openEndSum\n  };\n}\n\nexport default function InstitutionAnalysisClient({ initialInstitutionStats, availableYears, originalData }: InstitutionAnalysisClientProps) {\n  const [institutionStats, setInstitutionStats] = useState<InstitutionStat[]>(initialInstitutionStats);\n  const [filteredInstitutionStats, setFilteredInstitutionStats] = useState<InstitutionStat[]>(initialInstitutionStats);\n  const [selectedYear, setSelectedYear] = useState<number | 'all'>('all');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedInstitutionCourses, setSelectedInstitutionCourses] = useState<AggregatedCourseDataWithOpenCount[]>([]);\n  const [selectedInstitutionName, setSelectedInstitutionName] = useState<string>('');\n  const [filterType, setFilterType] = useState<'all' | 'leading' | 'tech'>('all');\n  const [selectedMonth, setSelectedMonth] = useState<number | 'all'>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedInstitutionRawCourses, setSelectedInstitutionRawCourses] = useState<CourseData[]>([]);\n  \n  const [isGroupModalOpen, setIsGroupModalOpen] = useState(false);\n  const [selectedGroupName, setSelectedGroupName] = useState<string>('');\n  const [individualInstitutions, setIndividualInstitutions] = useState<InstitutionStat[]>([]);\n\n  const isNewTechCourse = (course: CourseData) => !course.isLeadingCompanyCourse;\n\n  // 필터링 로직을 useMemo로 감싸 성능 최적화\n  useEffect(() => {\n    let currentFilteredStats = initialInstitutionStats;\n\n    // 유형 필터링\n    if (filterType === 'leading') {\n      currentFilteredStats = currentFilteredStats.filter((stat) =>\n        stat.courses.some((c) => c.isLeadingCompanyCourse)\n      );\n    } else if (filterType === 'tech') {\n      currentFilteredStats = currentFilteredStats.filter((stat) =>\n        stat.courses.some((c) => isNewTechCourse(c))\n      );\n    }\n\n    // 연도 및 월 필터링 (서버에서 이미 연도별로 계산된 통계를 사용)\n    // 클라이언트에서는 selectedYear와 selectedMonth에 따라 initialInstitutionStats를 다시 필터링\n    if (selectedYear !== 'all' || selectedMonth !== 'all') {\n      currentFilteredStats = initialInstitutionStats.filter(stat => {\n        // stat.courses는 해당 기관의 모든 과정 데이터를 포함하고 있음\n        // 이 과정들을 다시 필터링하여 선택된 연도와 월에 해당하는 통계를 계산해야 함\n        const filteredCoursesForStat = stat.courses.filter(course => {\n          const courseStartDate = new Date(course.과정시작일);\n          const courseEndDate = new Date(course.과정종료일);\n          \n          let yearMatch = true;\n          if (selectedYear !== 'all') {\n            yearMatch = courseStartDate.getFullYear() === selectedYear || (courseStartDate.getFullYear() < selectedYear && courseEndDate.getFullYear() === selectedYear);\n          }\n\n          let monthMatch = true;\n          if (selectedMonth !== 'all') {\n            monthMatch = (courseStartDate.getMonth() + 1) === selectedMonth;\n          }\n          return yearMatch && monthMatch;\n        });\n\n        // 필터링된 과정이 없으면 해당 기관은 제외\n        if (filteredCoursesForStat.length === 0) return false;\n\n        // 필터링된 과정으로 해당 기관의 통계를 다시 계산\n        const reCalculatedStats = getInstitutionYearlyStats({\n          rows: filteredCoursesForStat,\n          institutionName: stat.institutionName,\n          year: selectedYear === 'all' ? undefined : selectedYear,\n          month: selectedMonth\n        });\n\n        // 기존 stat 객체를 업데이트 (매출액은 서버에서 계산된 값을 유지)\n        stat.totalCourses = reCalculatedStats.operatedCourseCount;\n        stat.totalStudents = reCalculatedStats.x + reCalculatedStats.y;\n        stat.completedStudents = reCalculatedStats.xg + reCalculatedStats.yg;\n        stat.completionRate = parseFloat(reCalculatedStats.completionRate.replace('%', ''));\n        stat.avgSatisfaction = reCalculatedStats.avgSatisfaction;\n        \n        return true; // 필터링된 과정이 있으면 포함\n      });\n    }\n\n    // 검색어 필터링\n    const finalFiltered = currentFilteredStats.filter(stat => \n      stat.institutionName.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    // 매출액 기준으로 다시 정렬\n    finalFiltered.sort((a, b) => b.totalRevenue - a.totalRevenue);\n\n    setFilteredInstitutionStats(finalFiltered);\n  }, [selectedYear, filterType, selectedMonth, searchTerm, initialInstitutionStats]);\n\n  const handleViewDetails = (institutionName: string) => {\n    setSelectedInstitutionName(institutionName);\n    \n    let filteredOriginalData = originalData;\n    \n    if (filterType === 'leading') {\n      filteredOriginalData = filteredOriginalData.filter((c) => c.isLeadingCompanyCourse);\n    } else if (filterType === 'tech') {\n      filteredOriginalData = filteredOriginalData.filter(isNewTechCourse);\n    }\n    \n    if (selectedMonth !== 'all') {\n      filteredOriginalData = filteredOriginalData.filter(course => {\n        const courseStartDate = new Date(course.과정시작일);\n        return (courseStartDate.getMonth() + 1) === selectedMonth;\n      });\n    }\n    \n    const yearForCalculation = selectedYear === 'all' ? undefined : selectedYear;\n    const detailedStats = calculateInstitutionDetailedRevenue(originalData, institutionName, yearForCalculation);\n    \n    const aggregated = aggregateCoursesByCourseIdWithLatestInfo(detailedStats.courses, yearForCalculation, institutionName);\n    \n    setSelectedInstitutionCourses(aggregated as any);\n    setSelectedInstitutionRawCourses(detailedStats.courses);\n    setIsModalOpen(true);\n  };\n\n  const handleViewGroupDetails = (groupName: string) => {\n    setSelectedGroupName(groupName);\n    \n    let filteredOriginalData = originalData;\n    \n    if (filterType === 'leading') {\n      filteredOriginalData = filteredOriginalData.filter((c) => c.isLeadingCompanyCourse);\n    } else if (filterType === 'tech') {\n      filteredOriginalData = filteredOriginalData.filter(isNewTechCourse);\n    }\n    \n    if (selectedMonth !== 'all') {\n      filteredOriginalData = filteredOriginalData.filter(course => {\n        const courseStartDate = new Date(course.과정시작일);\n        return (courseStartDate.getMonth() + 1) === selectedMonth;\n      });\n    }\n    \n    const individualStats = getIndividualInstitutionsInGroup(\n      filteredOriginalData,\n      groupName,\n      selectedYear === 'all' ? undefined : selectedYear\n    );\n    \n    setIndividualInstitutions(individualStats);\n    setIsGroupModalOpen(true);\n  };\n\n  return (\n    <div className=\"p-6\">\n      <h1 className=\"text-2xl font-bold mb-6\">훈련기관별 분석</h1>\n\n      {/* 연도 선택 */}\n      <div className=\"mb-10 relative z-10 flex gap-6 items-end\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">연도 선택</label>\n          <Select\n            value={selectedYear.toString()}\n            onValueChange={(value) => setSelectedYear(value === 'all' ? 'all' : parseInt(value))}\n          >\n            <SelectTrigger className=\"w-[180px] bg-white\">\n              <SelectValue placeholder=\"연도 선택\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-white z-20\">\n              <SelectItem value=\"all\">전체 연도</SelectItem>\n              {availableYears.map((year) => (\n                <SelectItem key={year} value={year.toString()}>{year}년</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* 월 선택 */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">월 선택</label>\n          <Select\n            value={selectedMonth.toString()}\n            onValueChange={(value) => setSelectedMonth(value === 'all' ? 'all' : parseInt(value))}\n          >\n            <SelectTrigger className=\"w-[180px] bg-white\">\n              <SelectValue placeholder=\"월 선택\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-white z-20\">\n              <SelectItem value=\"all\">전체 월</SelectItem>\n              {[...Array(12)].map((_, i) => (\n                <SelectItem key={i + 1} value={(i + 1).toString()}>{i + 1}월</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* 유형 필터 */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">유형 필터</label>\n          <Select value={filterType} onValueChange={(v) => setFilterType(v as any)}>\n            <SelectTrigger className=\"w-[200px] bg-white\">\n              <SelectValue placeholder=\"유형 선택\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-white z-20\">\n              <SelectItem value=\"all\">전체</SelectItem>\n              <SelectItem value=\"leading\">선도기업 과정만</SelectItem>\n              <SelectItem value=\"tech\">신기술 과정만</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* 검색창 추가 */}\n        <div>\n          <label htmlFor=\"search\" className=\"block text-sm font-medium text-gray-700 mb-2\">훈련기관 검색</label>\n          <input\n            id=\"search\"\n            type=\"text\"\n            placeholder=\"기관명 검색...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-[200px] bg-white p-2 border border-gray-300 rounded-md\"\n          />\n        </div>\n      </div>\n\n      {/* 안내 문구 추가 */}\n      <div className=\"mb-4 text-sm text-blue-700 bg-blue-50 border border-blue-200 rounded px-4 py-2\">\n        ※ 과정이 2개년도에 걸쳐있는 경우, 각 년도에 차지하는 비율에 맞추어 매출이 분배됩니다.\n      </div>\n\n      {/* 매출액 차트 */}\n      <div className=\"bg-white rounded-lg shadow p-6 mt-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">훈련기관별 매출액 (억원)</h3>\n        <div className=\"h-[400px]\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart data={filteredInstitutionStats.slice(0, 10)}>\n              <XAxis\n                dataKey=\"institutionName\"\n                angle={0}\n                textAnchor=\"middle\"\n                height={100}\n                tick={{ fontSize: 14 }}\n                interval={0}\n                tickFormatter={(value: string, index: number) => {\n                  const rank = index + 1;\n                  let displayValue = `${value}`;\n                  if (value === '주식회사 코드스테이츠') {\n                    displayValue += ' (2023년 감사를 통해 훈련비 전액 반환)';\n                  }\n                  if (displayValue.length > 15) {\n                    displayValue = displayValue.substring(0, 12) + '...';\n                  }\n                  return `🏅 ${rank}위\\n${displayValue}`;\n                }}\n                dy={20}\n              />\n              <YAxis \n                tickFormatter={formatRevenue}\n                tick={{ fontSize: 12 }}\n              />\n              <Tooltip \n                formatter={(value: number) => [formatRevenue(value), '매출액']}\n                labelFormatter={(label) => {\n                  let institutionName = label.replace(/\\d+\\. /, '').replace(/ \\(2023년 감사를 통해 훈련비 전액 반환\\)/, '');\n                  if (institutionName === '주식회사 코드스테이츠') {\n                      return `기관명: ${institutionName} (2023년 감사를 통해 훈련비 전액 반환)`;\n                  }\n                  return `기관명: ${institutionName}`;\n                }}\n              />\n              <Bar dataKey=\"totalRevenue\" fill=\"#4F46E5\" name=\"매출액\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* 안내 문구 */}\n      {selectedYear !== 'all' && (\n        <div className=\"mb-4 text-sm text-gray-600 bg-gray-50 border border-gray-200 rounded px-4 py-3\">\n          <div>* 수료율은 과정 종료일 기준으로 계산하였으며, 분자는 {selectedYear}년 기준 {selectedYear}년의 수료생, 분모는 {selectedYear}년 기준 {selectedYear}년에 끝나는 과정이 있는 모든 과정의 입과생입니다.</div>\n          <div>* ()는 전 해년 입과, 당 해년 수료 인원을 표기하였습니다.</div>\n        </div>\n      )}\n\n      {/* 상세 통계 테이블 */}\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">순위 및 훈련기관</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">매출액</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">훈련과정 수</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">훈련생 수</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">수료인원</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">수료율</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">평균 만족도</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">상세</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {filteredInstitutionStats.map((stat, index) => (\n                <tr key={stat.institutionName}>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"ml-4\">\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {index + 1}. {stat.institutionName}\n                          {stat.institutionName === '주식회사 코드스테이츠' && (\n                            <span className=\"ml-2 text-xs text-red-600\">(2023년 감사를 통해 훈련비 전액 반환)</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">{formatRevenue(stat.totalRevenue)}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {(() => {\n                      const filteredRows = originalData.filter((c) => {\n                        if (filterType === 'leading') return c.isLeadingCompanyCourse;\n                        if (filterType === 'tech') return !c.isLeadingCompanyCourse;\n                        return true;\n                      });\n                      const stats = getInstitutionYearlyStats({\n                        rows: filteredRows,\n                        institutionName: stat.institutionName,\n                        year: selectedYear === 'all' ? undefined : selectedYear,\n                        month: selectedMonth\n                      });\n                      return <span dangerouslySetInnerHTML={{__html: stats.openCountStr}} />;\n                    })()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {(() => {\n                      const filteredRows = originalData.filter((c) => {\n                        if (filterType === 'leading') return c.isLeadingCompanyCourse;\n                        if (filterType === 'tech') return !c.isLeadingCompanyCourse;\n                        return true;\n                      });\n                      const stats = getInstitutionYearlyStats({\n                        rows: filteredRows,\n                        institutionName: stat.institutionName,\n                        year: selectedYear === 'all' ? undefined : selectedYear,\n                        month: selectedMonth\n                      });\n                      return <span dangerouslySetInnerHTML={{__html: stats.studentStr}} />;\n                    })()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {(() => {\n                      const filteredRows = originalData.filter((c) => {\n                        if (filterType === 'leading') return c.isLeadingCompanyCourse;\n                        if (filterType === 'tech') return !c.isLeadingCompanyCourse;\n                        return true;\n                      });\n                      const stats = getInstitutionYearlyStats({\n                        rows: filteredRows,\n                        institutionName: stat.institutionName,\n                        year: selectedYear === 'all' ? undefined : selectedYear,\n                        month: selectedMonth\n                      });\n                      return <span dangerouslySetInnerHTML={{__html: stats.graduateStr}} />;\n                    })()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">{(() => {\n                    const filteredRows = originalData.filter((c) => {\n                      if (filterType === 'leading') return c.isLeadingCompanyCourse;\n                      if (filterType === 'tech') return !c.isLeadingCompanyCourse;\n                      return true;\n                    });\n                    const stats = getInstitutionYearlyStats({\n                      rows: filteredRows,\n                      institutionName: stat.institutionName,\n                      year: selectedYear === 'all' ? undefined : selectedYear,\n                      month: selectedMonth\n                    });\n                    return stats.completionRate;\n                  })()}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">{(() => {\n                    const filteredRows = originalData.filter((c) => {\n                      if (filterType === 'leading') return c.isLeadingCompanyCourse;\n                      if (filterType === 'tech') return !c.isLeadingCompanyCourse;\n                      return true;\n                    });\n                    const stats = getInstitutionYearlyStats({\n                      rows: filteredRows,\n                      institutionName: stat.institutionName,\n                      year: selectedYear === 'all' ? undefined : selectedYear,\n                      month: selectedMonth\n                    });\n                    return (typeof stats.avgSatisfaction === 'number' && !isNaN(stats.avgSatisfaction)) ? stats.avgSatisfaction.toFixed(1) : '-';\n                  })()}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={() => handleViewDetails(stat.institutionName)}\n                          className=\"text-indigo-600 hover:text-indigo-900\"\n                          style={{\n                            backgroundColor: '#E0E7FF',\n                            color: '#4338CA',\n                            fontWeight: '500',\n                            padding: '0.25rem 0.5rem',\n                            borderRadius: '0.375rem',\n                            border: '1px solid #C7D2FE'\n                          }}\n                        >\n                          상세 보기\n                        </button>\n                        {['이젠아카데미', '그린컴퓨터아카데미', '더조은아카데미', '코리아IT아카데미', '비트교육센터', '하이미디어', '아이티윌', '메가스터디', '에이콘아카데미', '한국ICT인재개발원', 'MBC아카데미 컴퓨터 교육센터', '쌍용아카데미', 'KH정보교육원', '(주)솔데스크'].includes(stat.institutionName) && (\n                          <button\n                            onClick={() => handleViewGroupDetails(stat.institutionName)}\n                            className=\"text-green-600 hover:text-green-900\"\n                            style={{\n                              backgroundColor: '#D1FAE5',\n                              color: '#065F46',\n                              fontWeight: '500',\n                              padding: '0.25rem 0.5rem',\n                              borderRadius: '0.375rem',\n                              border: '1px solid #A7F3D0',\n                              fontSize: '0.75rem'\n                            }}\n                          >\n                            ▽ 개별기관\n                          </button>\n                        )}\n                      </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* 상세 모달 */}\n      <Dialog\n        open={isModalOpen}\n        onOpenChange={setIsModalOpen}\n      >\n        <DialogContent className=\"mx-auto max-w-[80vw] max-h-[85vh] w-full bg-white rounded-xl shadow-lg p-0 overflow-y-auto\">\n          <DialogHeader className=\"p-6 border-b\">\n            <DialogTitle className=\"text-lg font-medium leading-6 text-gray-900\">\n              {selectedInstitutionName} - 훈련과정 상세\n              {selectedYear !== 'all' && ` (${selectedYear}년)`}\n            </DialogTitle>\n            <DialogDescription>\n              선택된 훈련기관의 {selectedYear === 'all' ? '모든' : `${selectedYear}년`} 훈련과정 목록입니다. (매출액 기준 내림차순 정렬)\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"p-6\">\n            {/* 통계 요약 */}\n            <div className=\"grid grid-cols-5 gap-4 mb-6\">\n              {(() => {\n                const filteredRows = originalData.filter((c) => {\n                  if (filterType === 'leading') return c.isLeadingCompanyCourse;\n                  if (filterType === 'tech') return !c.isLeadingCompanyCourse;\n                  return true;\n                });\n                const stats = getInstitutionYearlyStats({\n                  rows: filteredRows,\n                  institutionName: selectedInstitutionName,\n                  year: selectedYear === 'all' ? undefined : selectedYear,\n                  month: selectedMonth\n                });\n                return (\n                  <>\n                    <div className=\"bg-gray-50 p-4 rounded-lg\">\n                      <div className=\"text-sm text-gray-500\">운영 중인 과정 수</div>\n                      <div className=\"text-lg font-semibold\">{stats.operatedCourseCount}</div>\n                    </div>\n                    <div className=\"bg-gray-50 p-4 rounded-lg\">\n                      <div className=\"text-sm text-gray-500\">{selectedYear === 'all' ? '전체 개강 회차수' : `${selectedYear}년 개강 회차수`}</div>\n                      <div className=\"text-lg font-semibold\">{stats.openedCourseCount}</div>\n                    </div>\n                    <div className=\"bg-gray-50 p-4 rounded-lg\">\n                      <div className=\"text-sm text-gray-500\">훈련생 수</div>\n                      <div className=\"text-lg font-semibold\">{stats.studentStr}</div>\n                    </div>\n                    <div className=\"bg-gray-50 p-4 rounded-lg\">\n                      <div className=\"text-sm text-gray-500\">수료인원</div>\n                      <div className=\"text-lg font-semibold\">{stats.graduateStr}</div>\n                    </div>\n                    <div className=\"bg-gray-50 p-4 rounded-lg\">\n                      <div className=\"text-sm text-gray-500\">평균 수료율</div>\n                      <div className=\"text-lg font-semibold\">{stats.completionRate}</div>\n                    </div>\n                  </>\n                );\n              })()}\n            </div>\n            <div className=\"overflow-x-auto max-h-[65vh]\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50 sticky top-0\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-[25%]\">과정명</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-[10%]\">훈련유형</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-[10%]\">훈련생 수</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-[10%]\">수료인원</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-[10%]\">수료율</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-[10%]\">매출액</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-[10%]\">만족도</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-[10%]\">개강 회차수</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {selectedInstitutionCourses.map((course: any) => (\n                    <tr key={course['훈련과정 ID']} className=\"hover:bg-gray-50\">\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-900\">{course.과정명}</td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">{course.훈련유형들?.join(', ') || '-'}</td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">{course.studentsStr}</td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">{course.graduatesStr}</td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">{course.평균수료율.toFixed(1)}% ({course.총수료인원}/{course.총수강신청인원})</td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">{formatRevenue(course.총누적매출)}</td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">{course.평균만족도.toFixed(1)}</td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">{course.openCountStr}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n          <div className=\"bg-gray-50 px-6 py-3 flex justify-end\">\n            <button\n              type=\"button\"\n              className=\"bg-white px-4 py-2 text-sm font-medium text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50\"\n              onClick={() => setIsModalOpen(false)}\n            >\n              닫기\n            </button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* 개별 기관 정보 모달 */}\n      <Dialog\n        open={isGroupModalOpen}\n        onOpenChange={setIsGroupModalOpen}\n      >\n        <DialogContent className=\"mx-auto max-w-[80vw] max-h-[85vh] w-full bg-white rounded-xl shadow-lg p-0 overflow-y-auto\">\n          <DialogHeader className=\"p-6 border-b\">\n            <DialogTitle className=\"text-lg font-medium leading-6 text-gray-900\">\n              {selectedGroupName} - 개별 기관 상세\n              {selectedYear !== 'all' && ` (${selectedYear}년)`}\n            </DialogTitle>\n            <DialogDescription>\n              {selectedGroupName} 그룹에 속하는 개별 기관들의 상세 정보입니다. (매출액 기준 내림차순 정렬)\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"p-6\">\n            <div className=\"overflow-x-auto max-h-[65vh]\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50 sticky top-0\">\n                  <tr>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">순위</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">기관명</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">매출액</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">훈련과정 수</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">훈련생 수</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">수료인원</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">수료율</th>\n                    <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">평균 만족도</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {individualInstitutions.map((institution, index) => (\n                    <tr key={institution.institutionName} className=\"hover:bg-gray-50\">\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-900 font-medium\">\n                        {index + 1}\n                      </td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-900\">\n                        {institution.institutionName}\n                      </td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">{formatRevenue(institution.totalRevenue)}</td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">{formatNumber(institution.totalCourses)}</td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">\n                        {selectedYear !== 'all' && selectedMonth === 'all' && institution.prevYearStudents > 0\n                          ? (\n                            <div>\n                              <div>{formatNumber(institution.totalStudents)}</div>\n                              <div className=\"text-xs text-gray-500\">({formatNumber(institution.prevYearStudents)})</div>\n                            </div>\n                          )\n                          : formatNumber(institution.totalStudents)\n                        }\n                      </td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">\n                        {selectedYear !== 'all' && selectedMonth === 'all' && institution.prevYearCompletedStudents > 0\n                          ? (\n                            <div>\n                              <div>{formatNumber(institution.completedStudents)}</div>\n                              <div className=\"text-xs text-gray-500\">({formatNumber(institution.prevYearCompletedStudents)})</div>\n                            </div>\n                          )\n                          : formatNumber(institution.completedStudents)\n                        }\n                      </td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">{institution.completionRate.toFixed(1)}%</td>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">{institution.avgSatisfaction.toFixed(1)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n          <div className=\"bg-gray-50 px-6 py-3 flex justify-end\">\n            <button\n              type=\"button\"\n              className=\"bg-white px-4 py-2 text-sm font-medium text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50\"\n              onClick={() => setIsGroupModalOpen(false)}\n            >\n              닫기\n            </button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\n// Custom Tick 컴포넌트 (필요시 사용)\nconst CustomTick = (props: any) => {\n  const { x, y, payload, index } = props;\n  const value = payload.value;\n  const rank = index + 1;\n  let displayValue = `${value}`;\n  if (value === '주식회사 코드스테이츠') {\n    displayValue += ' (2023년 감사를 통해 훈련비 전액 반환)';\n  }\n  if (displayValue.length > 15) {\n    displayValue = displayValue.substring(0, 12) + '...';\n  }\n\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text x={0} y={0} dy={16} textAnchor=\"middle\" fill=\"#666\" fontSize={10}>\n        <tspan x={0} dy=\"-1.2em\">🥇 ${rank}위</tspan>\n        <tspan x={0} dy=\"1.2em\">{displayValue}</tspan>\n      </text>\n    </g>\n  );\n};"],"names":[],"mappings":"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","debugId":null}}]
}